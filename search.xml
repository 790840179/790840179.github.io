<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2018日志]]></title>
    <url>%2F2018%2F05%2F16%2F2018%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[2.5 12调入能源管理组app开发事宜，挺好 3.1 1搬入B4-409 3.9 1echarts地图绘制 4.16-4.20 12佛山出差，可视化项目，涉及接口事宜什么玩意儿，不开心 4.24-4.27 123石家庄出差，河北实物资产管理项目，OSP环境搭建、测试数据库导入OK，主力，现场环境相对比较复杂，解决问题PS:杨妈身体有恙，很冲突，烦躁 4.29 1回苏州，吴江第一人民医院，杨妈身体情况不确定 5.2-5.6 123石家庄出差，服务端与PMS2.0台账信息查询、服务转发等接口调试OK，辅助作用，协调沟通，解决问题PS:杨妈身体有恙，很冲突，烦躁 5.10 1arduino开始 5.12 1回苏州，苏州大学附属第二医院，杨妈情况相对好转]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>2018</tag>
        <tag>工作，生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[axios使用小结]]></title>
    <url>%2F2018%2F05%2F16%2Faxios%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[安装引用方式npm install axios –save 安装 import axios from ‘axios’ 引用 GET请求12345678910111213141516171819202122232425//向具有指定ID的用户发出请求axios.get(&apos;user?ID=12345&apos;).then(function(response)&#123; console.log(response);&#125;).catch(function(error)&#123; console.log(error);&#125;)//通过params对象传递参数axios.get(&apos;/user&apos;,&#123; params:&#123; ID:12345 &#125;&#125;).then(function(response)&#123; console.log(response);&#125;).catch(function(error)&#123; console.log(error);&#125;)//axios(url[, config])//发送一个GET请求(GET请求是默认请求模式)axios(&apos;./user/12345&apos;) POST请求1234567891011121314151617181920axios.post(&apos;./user&apos;,&#123; firstName: &apos;FRED&apos;, lastName: &apos;JACKHAHA&apos;&#125;).then(function(response)&#123; console.log(response);&#125;).catch(function(error)&#123; console.log(error);&#125;)//axios(config)axios(&#123; method: &apos;post&apos;, url: &apos;/user/12345&apos;, data:&#123; firstName: &apos;Fred&apos;, lastName: &apos;Flintstone&apos;&#125;&#125;); 执行多个并发请求12345678910function getUserAccount()&#123; return axios.get(&apos;/user/12345&apos;);&#125;function getUserPermissions()&#123; return axios.get(&apos;./user/12345/permissions&apos;);&#125;axios.all([getUserAccount(), getUserPermissions()]).then(axios.spread(function(acct, perms)&#123; //两个请求现在已经实现&#125;)) response响应12345678910// 服务器返回的数据data: &#123;&#125;,// HTTP状态吗status: 200,// 服务器返回的消息statusText: &apos;OK&apos;,// 返回头headers: &#123;&#125;,// 在返回我们的配置config: &#123;&#125; 统一全局axios配置1234axios.defaults.timeout = 5000;axios.defaults.baseURL = &apos;https://api.example.com&apos;;axios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;; Interceptors拦截器在我们发起大量请求的时候，需要对请求做统一的处理那就用到它了。 实例用法123456789101112131415161718192021import axios from &apos;axios&apos;import qs from &apos;qs&apos;axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;;//POST传参序列化let params = &#123; username: &apos;tzf&apos;, password: &apos;123456&apos;&#125;axios.post( &apos;https://domail.com/api/login&apos;, //url qs.stringify(params)).then( res =&gt; &#123; console.log(res.data) &#125;, error =&gt; &#123; console.log(error) &#125;) request统一处理操作如果是POST的请求，配置中就不能使用params字段了，需要使用data字段 POST传参需要序列化，不然服务器端不能正确接收，所以需要对request的数据进行一次序列化，我们使用qs, import qs from ‘qs’ POST请求时，参数需要使用qs.stringify() 123456789101112import axios from &apos;axios&apos;import qs from &apos;qs&apos;axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;;//POST传参序列化axios.interceptors.request.use((config) =&gt; &#123; if(config.method === &apos;post&apos;)&#123; config.data = qs.stringify(config.data); &#125; return config;&#125;,(error) =&gt;&#123; alert(&quot;错误的传参&quot;); return Promise.reject(error); response统一处理操作1234567891011//code状态码200判断axios.interceptors.response.use((res) =&gt;&#123; if(res.data.code != &apos;200&apos;)&#123; alert(res.data.msg); return Promise.reject(res); &#125; return res;&#125;, (error) =&gt; &#123; alert(&quot;网络异常&quot;); return Promise.reject(error);&#125;); 参考配置//文件名是config/http.js 12345678910111213141516171819202122232425262728293031323334import axios from &apos;axios&apos;import qs from &apos;qs&apos;import * as _ from &apos;./whole&apos; //alertaxios.defaults.timeout = 5000; //5秒超时验证axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;;axios.defaults.baseURL = &apos;http://www.guinaben.com:8070&apos;;// axios.defaults.baseURL = &apos;http://192.168.1.129:8383&apos;;//POST传参序列化(request统一处理操作)axios.interceptors.request.use((config) =&gt; &#123; if(config.method === &apos;post&apos;)&#123; config.data = qs.stringify(config.data); &#125; return config;&#125;,(error) =&gt;&#123; _.toast(&quot;错误的传参&quot;); return Promise.reject(error);&#125;);//code状态码200判断(response统一处理操作)axios.interceptors.response.use((res) =&gt;&#123; if(res.data.code != &apos;200&apos;)&#123; _.toast(res.data.msg); return Promise.reject(res); &#125; return res;&#125;, (error) =&gt; &#123; _.toast(&quot;网络异常&quot;); return Promise.reject(error);&#125;);export default axios; //发起的请求 123456789101112131415161718192021222324import axios from &apos;config/http&apos;axios(&#123; method:&apos;get&apos;, url: &apos;xxxx/xxxxx&apos;, params: &#123; &quot;textbook_id&quot;:id, &quot;token&quot;:token &#125;&#125;).then((response) =&gt; &#123; resolve(response);&#125;)axios(&#123; method:&apos;post&apos;, url: &apos;teacher/pwd/resetByMobile&apos;, data: &#123; &quot;textbook_id&quot;:id, &quot;token&quot;:token &#125;&#125;).then((response) =&gt; &#123; resolve(response);&#125;)]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几种不同格式json解析]]></title>
    <url>%2F2018%2F03%2F29%2F%E5%87%A0%E7%A7%8D%E4%B8%8D%E5%90%8C%E6%A0%BC%E5%BC%8Fjson%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[JSON的基本数据格式 1.一个JSON对象-JSONObject {“name”:”胡小威” , “age”:20 , “male”:true} 123456789101112public void parseJsonObject(String json) &#123; try &#123; JSONObject jsonObject = new JSONObject(json); String name = jsonObject.getString(&quot;name&quot;); int age = jsonObject.getInt(&quot;age&quot;); boolean male = jsonObject.getBoolean(&quot;male&quot;); //接下来该干嘛干嘛 &#125; catch (JSONException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; 2.一个JSON数组-JSONArray [{“name”:”胡小威” , “age”:20 , “male”:true},{“name”:”赵小亮” , “age”:22 , “male”:false}] 123456789101112131415public void parseJSONArray(String json) &#123; try &#123; JSONArray jsonArray = new JSONArray(json); for (int i = 0; i &lt; jsonArray.length(); i++) &#123; JSONObject jsonObject = jsonArray.getJSONObject(i); String name = jsonObject.getString(&quot;name&quot;); int age = jsonObject.getInt(&quot;age&quot;); boolean male = jsonObject.getBoolean(&quot;male&quot;); //接下来该干嘛干嘛 &#125; &#125; catch (JSONException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; 3.复杂一点的JSONObject {“name”:”胡小威”, “age”=20, “male”:true, “address”:{“street”:”岳麓山南”, “city”:”长沙”,”country”:”中国”}} 1234567891011121314151617public void parseJsonPerson(String json) &#123; try &#123; JSONObject jsonObject = new JSONObject(json); String name = jsonObject.getString(&quot;name&quot;); int age = jsonObject.getInt(&quot;age&quot;); boolean male = jsonObject.getBoolean(&quot;male&quot;); JSONObject addressJSON = jsonObject.getJSONObject(&quot;address&quot;); String street = addressJSON.getString(&quot;street&quot;); String city = addressJSON.getString(&quot;city&quot;); String country = addressJSON.getString(&quot;country&quot;); Address address = new Address(street, city, country); Person person = new Person(name, age, male, address); &#125; catch (JSONException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; 4.复杂一点的JSONArray [{“name”:”胡小威”, “age”=20, “male”:true, “address”:{“street”:”岳麓山南”, “city”:”长沙”,”country”:”中国”}}, {“name”:”赵小亮”, “age”=22, “male”:false, “address”:{“street”:”九州港”, “city”:”珠海”,”country”:”中国”}}] 123456789101112131415161718192021222324public void parseJsonArrayPerson(String json) &#123; List&lt;Person&gt; persons = new ArrayList&lt;Person&gt;(); try &#123; jsonArray = new JSONArray(json); for (int i = 0; i &lt; jsonArray.length(); i++) &#123; JSONObject jsonObject = jsonArray.getJSONObject(i); String name = jsonObject.getString(&quot;name&quot;); int age = jsonObject.getInt(&quot;age&quot;); boolean male = jsonObject.getBoolean(&quot;male&quot;); JSONObject addressJSON = jsonObject.getJSONObject(&quot;address&quot;); String street = addressJSON.getString(&quot;street&quot;); String city = addressJSON.getString(&quot;city&quot;); String country = addressJSON.getString(&quot;country&quot;); Address address = new Address(street, city, country); Person person = new Person(name, age, male, address); persons.add(person); Log.v(&quot;juno&quot;, person.toString()); &#125; &#125; catch (JSONException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; Log.v(&quot;juno&quot;, persons.toString()); &#125; 5.最复杂的JSON {“buses”:{“bus”:[{“last_foot_dist”:”0”,”time”:”37”,”segments”:{“segment”:[{“line_name”:”立珊专线(中南大学学生公寓-长沙火车站)”,”foot_dist”:”362”,”stat_xys”:””,”stats”:”岳麓山南;湖南师大;二里半;岳麓山北;市四医院;华图教育(太平街口);牛耳教育(南阳街口);韭菜园;曙光路口;长岛路口;长沙火车站”,”end_stat”:”长沙火车站”,”line_xys”:””,”line_dist”:”7535”,”start_stat”:”岳麓山南”}]},”foot_dist”:”362”,”dist”:”7897”},{“last_foot_dist”:”0”,”time”:”41”,”segments”:{“segment”:[{“line_name”:”旅1路(科教新村-长沙火车站)”,”foot_dist”:”337”,”stat_xys”:””,”stats”:”岳麓山南;湖南师大;二里半;岳麓山北;市四医院;华图教育(太平街口);蔡锷中路口;韭菜园;乔庄;曙光路口;长岛路口;五一东村;车站路口;长沙火车站”,”end_stat”:”长沙火车站”,”line_xys”:””,”line_dist”:”7822”,”start_stat”:”岳麓山南”}]},”foot_dist”:”337”,”dist”:”8159”}]}} 123456789101112131415161718192021222324252627282930313233343536373839404142public List&lt;Salution&gt; parseJSON(String str)&#123; Log.d(&quot;返回的JSON数据：&quot;, str); List&lt;Salution&gt; busList = new ArrayList&lt;Salution&gt;(); try &#123; JSONObject jsonObject = new JSONObject(str); JSONObject busesJSON = jsonObject.getJSONObject(&quot;buses&quot;); JSONArray busJSArray=busesJSON.getJSONArray(&quot;bus&quot;); for(int i=0;i&lt;busJSArray.length();i++)&#123; JSONObject busJSObject = busJSArray.getJSONObject(i); JSONObject segsJSObject=busJSObject.getJSONObject(&quot;segments&quot;); JSONArray segJSArray=segsJSObject.getJSONArray(&quot;segment&quot;); Salution st=new Salution(); for(int j=0;j&lt;segJSArray.length();j++)&#123; if(j==0)&#123; JSONObject segJSObject = segJSArray.getJSONObject(j); st.setLine_name1(segJSObject.getString(&quot;line_name&quot;)); Log.d(&quot;line_name&quot;, segJSObject.getString(&quot;line_name&quot;)); st.setStats1(segJSObject.getString(&quot;stats&quot;)); st.setEnd_stat1(segJSObject.getString(&quot;end_stat&quot;)); st.setStart_stat1(segJSObject.getString(&quot;start_stat&quot;)); &#125; if(j==1)&#123; JSONObject segJSObject = segJSArray.getJSONObject(j); st.setLine_name2(segJSObject.getString(&quot;line_name&quot;)); Log.d(&quot;line_name&quot;, segJSObject.getString(&quot;line_name&quot;)); st.setStats2(segJSObject.getString(&quot;stats&quot;)); st.setEnd_stat2(segJSObject.getString(&quot;end_stat&quot;)); st.setStart_stat2(segJSObject.getString(&quot;start_stat&quot;)); &#125; &#125; busList.add(st); &#125; return busList; &#125; catch (JSONException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return null; &#125; https://blog.csdn.net/fanhu6816/article/details/52870230]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECharts数据可视化全解注释]]></title>
    <url>%2F2018%2F03%2F09%2FECharts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%85%A8%E8%A7%A3%E6%B3%A8%E9%87%8A%2F</url>
    <content type="text"><![CDATA[学习了百度Echart官方教程，不得不说官方教程还是非常不错了。这里对Echart所有教程知识进行了总结。自己喜欢边学边总结边写demo，所以写了这篇文章，包含了大部分的Echarts编程知识。让你一个demo掌握Echarts所有编程，如果有问题可以留言。 此demo除了必须的链接文件外，主要包括17个文件：index.html和index.js、coordinate-geo.js、coordinate-grid.js、coordinate-parallel.js、coordinate-polar.js、coordinate-radar.js、series.js、series-bar.js、series-effectscatter.js、series-graph.js、series-heatmap.js、series-lines.js、series-map.js、series-pie.js、series-radar.js、series-scatter.js文件 index.html文件为一个简单的演示页面。包含了Echarts所必须的链接文件，图表的使用方法，但不包含配置方法。 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html style=&quot;height: 100%&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body style=&quot;height: 100%; margin: 0&quot;&gt; &lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt; &lt;div id=&quot;container&quot; style=&quot;height: 100%&quot;&gt;&lt;/div&gt;&lt;!--所需js文件--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/echarts-all-3.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/extension/dataTool.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/extension/jquery-2.2.4.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/map/js/china.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/map/js/world.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/api.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/extension/bmap.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;bar.js&quot;&gt;&lt;/script&gt; &lt;!-- 自定义图表配置option对象，只需要学习这个 --&gt;&lt;!--代码--&gt;&lt;script type=&quot;text/javascript&quot;&gt;var dom = document.getElementById(&quot;container&quot;);var myChart = echarts.init(dom); /* 使用dom初始化echarts*/myChart.hideLoading(); /* 加载缓冲图 */option=&#123; /* 对应需要设置配置 */ title:title,&#125;;myChart.showLoading(); /* 去除加载缓冲图 */myChart.setOption(option); /* 应用配置选项 */if (option &amp;&amp; typeof option === &quot;object&quot;) &#123; myChart.setOption(option, true);&#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; coordinate-geo.js文件为地理坐标系的配置参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;geo=[&#123; show:true, //是否显示 map:&quot;china&quot;, //地图类型。world世界地图，china中国地图 roam:false, //是否开启鼠标缩放和平移漫游。默认不开启。如果只想要开启缩放或者平移，可以设置成 &apos;scale&apos; 或者 &apos;move&apos;。设置成 true 为都开启 center:[115.97, 29.71], //当前视角的中心点，用经纬度表示 aspectScale:0.75, //这个参数用于 scale 地图的长宽比。 boundingCoords: [[-180, 90], [180, -90]], //二维数组，定义定位的左上角以及右下角分别所对应的经纬度 zoom:1, //当前视角的缩放比例 scaleLimit:&#123; //所属组件的z分层，z值小的图形会被z值大的图形覆盖 min:1, //最小的缩放值 max:1, //最大的缩放值 &#125;, nameMap:&#123; //自定义地区的名称映射 &apos;China&apos; : &apos;中国&apos; &#125;, selectedMode: false , //选中模式，表示是否支持多个选中，默认关闭，支持布尔值和字符串，字符串取值可选&apos;single&apos;表示单选，或者&apos;multiple&apos;表示多选。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等 normal:&#123; show:false, //是否在普通状态下显示标签。 textStyle:mytextStyle, //普通状态下的标签文本样式。 &#125;, emphasis:&#123; show:false, //是否在高亮状态下显示标签。 textStyle:mytextStyle //高亮状态下的标签文本样式。 &#125; &#125;, itemStyle:&#123; //地图区域的多边形 图形样式 normal:myitemStyle, emphasis:myitemStyle &#125;, zlevel:0, //所属图形的 zlevel 值。 z:2, //所属图形的 z 值。 left:&quot;10%&quot;, //组件离容器左侧的距离,百分比字符串或整型数字 top:60, //组件离容器上侧的距离，百分比字符串或整型数字 right:&quot;auto&quot;, //组件离容器右侧的距离,百分比字符串或整型数字 bottom:&quot;auto&quot;, //组件离容器下侧的距离,百分比字符串或整型数字 layoutCenter:[&apos;30%&apos;, &apos;30%&apos;], //地图中心在屏幕中的位置 layoutSize:100, //地图的大小,支持相对于屏幕宽高的百分比或者绝对的像素大小。 regions:[&#123; //在地图中对特定的区域配置样式。 name: &apos;广东&apos;, itemStyle: &#123; normal: &#123; areaColor: &apos;red&apos;, color: &apos;red&apos; &#125; &#125; &#125;], silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。&#125;]; coordinate-grid.js文件为直角坐标系的配置参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;grid=[&#123; show:true, //是否显示 zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 left:&quot;10%&quot;, //组件离容器左侧的距离,百分比字符串或整型数字 top:60, //组件离容器上侧的距离，百分比字符串或整型数字 right:&quot;auto&quot;, //组件离容器右侧的距离,百分比字符串或整型数字 bottom:&quot;auto&quot;, //组件离容器下侧的距离,百分比字符串或整型数字 width:&quot;auto&quot;, //图例宽度 height:&quot;auto&quot;, //图例高度 containLabel: true, //grid 区域是否包含坐标轴的刻度标签， backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //阴影的模糊大小 tooltip:&#123; //坐标系特定的 tooltip 设定 show:true, //是否显示提示框组件，包括提示框浮层和 axisPointer trigger:&quot;axis&quot;, //触发类型 none不触发 &apos;item&apos; 数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。 &apos;axis&apos; 坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。 position: [&apos;50%&apos;, &apos;50%&apos;], //提示框浮层的位置，默认不设置时位置会跟随鼠标的位置,[10, 10],回掉函数，inside鼠标所在图形的内部中心位置，top、left、bottom、right鼠标所在图形上侧，左侧，下侧，右侧， formatter:&quot;&#123;b0&#125;: &#123;c0&#125;&lt;br /&gt;&#123;b1&#125;: &#123;c1&#125;&quot;, //提示框浮层内容格式器，支持字符串模板和回调函数两种形式,模板变量有 &#123;a&#125;, &#123;b&#125;，&#123;c&#125;，&#123;d&#125;，&#123;e&#125;，分别表示系列名，数据名，数据值等 backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 padding:5, //图例内边距，单位px 5 [5, 10] [5,10,5,10] textStyle:mytextStyle, //文本样式 &#125;,&#125;];xAxis=[ &#123; show:true, //是否显示 x 轴 gridIndex:0, //x 轴所在的 grid 的索引，默认位于第一个 grid position:&quot;bottom&quot;, //x 轴的位置。&quot;top&quot;，&quot;bottom&quot;，默认 grid 中的第一个 x 轴在 grid 的下方（&apos;bottom&apos;），第二个 x 轴视第一个 x 轴的位置放在另一侧 offset:0, //X 轴相对于默认位置的偏移，在相同的 position 上有多个 X 轴的时候有用 type:&quot;category&quot;, //坐标轴类型。&apos;value&apos; 数值轴，适用于连续数据。&apos;category&apos; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。 // &apos;time&apos; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。&apos;log&apos; 对数轴。适用于对数数据 name:&apos;时间&apos;, //坐标轴名称 nameLocation:&quot;end&quot;, //坐标轴名称显示位置。可选：&apos;start&apos;,&apos;middle&apos;,&apos;end&apos; nameTextStyle:mytextStyle, //坐标轴名称的文字样式 nameGap:15, //坐标轴名称与轴线之间的距离 nameRotate:0, //坐标轴名字旋转，角度值 inverse:false, //是否是反向坐标轴 boundaryGap:true, //类目轴中 boundaryGap 可以配置为 true 和 false。非类目轴，包括时间，数值，对数轴，boundaryGap是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置 min 和 max 后无效[&apos;20%&apos;, &apos;20%&apos;] min:null, //坐标轴刻度最小值。可以设置成特殊值 &apos;dataMin&apos;，此时取数据在该轴上的最小值作为最小刻度。不设置时会自动计算最小值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 max:null, //坐标轴刻度最大值。可以设置成特殊值 &apos;dataMax&apos;，此时取数据在该轴上的最大值作为最大刻度。不设置时会自动计算最大值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 scale:false, //只在数值轴中（type: &apos;value&apos;）有效。是否是脱离 0 值比例。设置成 true 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。在设置 min 和 max 之后该配置项无效。 splitNumber:5, //坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整 minInterval:0, //自动计算的坐标轴最小间隔大小,例如可以设置成1保证坐标轴分割刻度显示成整数。只在数值轴中（type: &apos;value&apos;）有效。 logBase:10, //对数轴的底数，只在对数轴中（type: &apos;log&apos;）有效 silent:false, //坐标轴是否是静态无法交互 triggerEvent:false, //坐标轴的标签是否响应和触发鼠标事件 axisLine:&#123; //坐标 轴线 show:true, //是否显示坐标轴轴线 onZero:true, //X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效 lineStyle:mylineStyle &#125;, axisTick :&#123; //坐标轴刻度相关设置 show:true, //是否显示坐标轴刻度。 alignWithLabel:false, //类目轴中在 boundaryGap 为 true 的时候有效，可以保证刻度线和标签对齐 interval:auto, //坐标轴刻度的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //坐标轴刻度是否朝内，默认朝外。 length:5, //坐标轴刻度的长度。 lineStyle:mylineStyle &#125;, axisLabel:&#123; //坐标轴刻度标签的相关设置 show:true, //是否显示 interval:&quot;auto&quot;, //坐标轴刻度标签的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //刻度标签是否朝内，默认朝外 rotate:0, //刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。旋转的角度从 -90 度到 90 度 margin:8, //刻度标签与轴线之间的距离 formatter: function (value, index) &#123; //使用函数模板，函数参数分别为刻度数值（类目），刻度的索引 return value+&quot;kg&quot;; &#125;, showMinLabel:null, //是否显示最小 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最小 tick 的 label） showMaxLabel:null, //是否显示最大 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最大 tick 的 label） textStyle:mytextStyle &#125;, splitLine:&#123; //坐标轴在 grid 区域中的分隔线。 show:true, //是否显示分隔线。默认数值轴显示，类目轴不显示。 interval:&quot;auto&quot;, //坐标轴分隔线的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下： lineStyle:mylineStyle &#125;, splitArea:&#123; //坐标轴在 grid 区域中的分隔区域，默认不显示。 interval:&quot;auto&quot;, show:false, //是否显示分隔区域 areaStyle:myareaStyle &#125;, data : [&apos;周一&apos;, &apos;周二&apos;, &apos;周三&apos;, &apos;周四&apos;, &apos;周五&apos;, &apos;周六&apos;, &apos;周日&apos;], //类目数据，在类目轴（type: &apos;category&apos;）中有效。 zlevel:0, //X 轴所有图形的 zlevel 值。 z:0, //X 轴组件的所有图形的z值 &#125;];yAxis=xAxis; //y轴配置内容同x轴 coordinate-parallel.js文件为平行坐标系的配置参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;parallel=[&#123; show:true, //是否显示 zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 left:&quot;10%&quot;, //组件离容器左侧的距离,百分比字符串或整型数字 top:60, //组件离容器上侧的距离，百分比字符串或整型数字 right:&quot;auto&quot;, //组件离容器右侧的距离,百分比字符串或整型数字 bottom:&quot;auto&quot;, //组件离容器下侧的距离,百分比字符串或整型数字 width:&quot;auto&quot;, //图例宽度 height:&quot;auto&quot;, //图例高度 layout: &quot;horizontal&quot;, //布局方式，可选值为：&apos;horizontal&apos;：水平排布各个坐标轴。&apos;vertical&apos;：竖直排布各个坐标轴。 axisExpandable:false, //是否允许点击展开折叠 axis。 axisExpandCenter:null, //初始时，以哪个轴为中心展开，这里给出轴的 index。没有默认值，需要手动指定。 axisExpandCount:0, //初始时，有多少个轴会处于展开状态。建议根据你的维度个数而手动指定。 axisExpandWidth:50, //在展开状态，轴的间距是多少，单位为像素。 axisExpandTriggerOn:&quot;click&quot;, //&apos;click&apos;：鼠标点击的时候 expand。&apos;mousemove&apos;：鼠标悬浮的时候 expand。 parallelAxisDefault:&#123; //配置多个 parallelAxis 时，有些值一样的属性，如果书写多遍则比较繁琐，那么可以放置在 parallel.parallelAxisDefault 里 type:&quot;category&quot;, //坐标轴类型。&apos;value&apos; 数值轴，适用于连续数据。&apos;category&apos; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。 // &apos;time&apos; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。&apos;log&apos; 对数轴。适用于对数数据 name:&apos;时间&apos;, //坐标轴名称 nameLocation:&quot;end&quot;, //坐标轴名称显示位置。可选：&apos;start&apos;,&apos;middle&apos;,&apos;end&apos; nameTextStyle:mytextStyle, //坐标轴名称的文字样式 nameGap:15, //坐标轴名称与轴线之间的距离 nameRotate:0, //坐标轴名字旋转，角度值 inverse:false, //是否是反向坐标轴 boundaryGap:true, //类目轴中 boundaryGap 可以配置为 true 和 false。非类目轴，包括时间，数值，对数轴，boundaryGap是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置 min 和 max 后无效[&apos;20%&apos;, &apos;20%&apos;] min:null, //坐标轴刻度最小值。可以设置成特殊值 &apos;dataMin&apos;，此时取数据在该轴上的最小值作为最小刻度。不设置时会自动计算最小值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 max:null, //坐标轴刻度最大值。可以设置成特殊值 &apos;dataMax&apos;，此时取数据在该轴上的最大值作为最大刻度。不设置时会自动计算最大值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 scale:false, //只在数值轴中（type: &apos;value&apos;）有效。是否是脱离 0 值比例。设置成 true 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。在设置 min 和 max 之后该配置项无效。 splitNumber:5, //坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整 minInterval:0, //自动计算的坐标轴最小间隔大小,例如可以设置成1保证坐标轴分割刻度显示成整数。只在数值轴中（type: &apos;value&apos;）有效。 logBase:10, //对数轴的底数，只在对数轴中（type: &apos;log&apos;）有效 silent:false, //坐标轴是否是静态无法交互 triggerEvent:false, //坐标轴的标签是否响应和触发鼠标事件 axisLine:&#123; //坐标 轴线 show:true, //是否显示坐标轴轴线 onZero:true, //X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效 lineStyle:mylineStyle &#125;, axisTick :&#123; //坐标轴刻度相关设置 show:true, //是否显示坐标轴刻度。 alignWithLabel:false, //类目轴中在 boundaryGap 为 true 的时候有效，可以保证刻度线和标签对齐 interval:auto, //坐标轴刻度的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //坐标轴刻度是否朝内，默认朝外。 length:5, //坐标轴刻度的长度。 lineStyle:mylineStyle // &#125;, axisLabel:&#123; //坐标轴刻度标签的相关设置 show:true, //是否显示 interval:&quot;auto&quot;, //坐标轴刻度标签的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //刻度标签是否朝内，默认朝外 rotate:0, //刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。旋转的角度从 -90 度到 90 度 margin:8, //刻度标签与轴线之间的距离 formatter: function (value, index) &#123; //使用函数模板，函数参数分别为刻度数值（类目），刻度的索引 return value+&quot;kg&quot;; &#125;, showMinLabel:null, //是否显示最小 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最小 tick 的 label） showMaxLabel:null, //是否显示最大 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最大 tick 的 label） textStyle:mytextStyle &#125;, data : [&apos;周一&apos;, &apos;周二&apos;, &apos;周三&apos;, &apos;周四&apos;, &apos;周五&apos;, &apos;周六&apos;, &apos;周日&apos;], //类目数据，在类目轴（type: &apos;category&apos;）中有效。 &#125;,&#125;];parallelAxis=[ &#123; dim:0, //坐标轴的维度序号。 parallelIndex:0, //用于定义『坐标轴』对应到哪个『坐标系』中。 realtime:true, //是否坐标轴刷选的时候，实时刷新视图。如果设为 false，则在刷选动作结束时候，才刷新视图。大数据量时，建议设置成 false，从而避免卡顿。 areaSelectStyle:&#123; //在坐标轴上可以进行框选，这里是一些框选的设置。 width:20, //框选范围的宽度。 borderWidth:1, //选框的边框宽度。 borderColor:&apos;rgba(160,197,232)&apos;, //选框的边框颜色。 color: &apos;rgba(160,197,232)&apos;, //选框的填充色。 opacity:0.3, //选框的透明度。 &#125;, type:&quot;category&quot;, //坐标轴类型。&apos;value&apos; 数值轴，适用于连续数据。&apos;category&apos; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。 // &apos;time&apos; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。&apos;log&apos; 对数轴。适用于对数数据 name:&apos;时间&apos;, //坐标轴名称 nameLocation:&quot;end&quot;, //坐标轴名称显示位置。可选：&apos;start&apos;,&apos;middle&apos;,&apos;end&apos; nameTextStyle:mytextStyle, //坐标轴名称的文字样式 nameGap:15, //坐标轴名称与轴线之间的距离 nameRotate:0, //坐标轴名字旋转，角度值 inverse:false, //是否是反向坐标轴 boundaryGap:true, //类目轴中 boundaryGap 可以配置为 true 和 false。非类目轴，包括时间，数值，对数轴，boundaryGap是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置 min 和 max 后无效[&apos;20%&apos;, &apos;20%&apos;] min:null, //坐标轴刻度最小值。可以设置成特殊值 &apos;dataMin&apos;，此时取数据在该轴上的最小值作为最小刻度。不设置时会自动计算最小值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 max:null, //坐标轴刻度最大值。可以设置成特殊值 &apos;dataMax&apos;，此时取数据在该轴上的最大值作为最大刻度。不设置时会自动计算最大值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 scale:false, //只在数值轴中（type: &apos;value&apos;）有效。是否是脱离 0 值比例。设置成 true 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。在设置 min 和 max 之后该配置项无效。 splitNumber:5, //坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整 minInterval:0, //自动计算的坐标轴最小间隔大小,例如可以设置成1保证坐标轴分割刻度显示成整数。只在数值轴中（type: &apos;value&apos;）有效。 logBase:10, //对数轴的底数，只在对数轴中（type: &apos;log&apos;）有效 silent:false, //坐标轴是否是静态无法交互 triggerEvent:false, //坐标轴的标签是否响应和触发鼠标事件 axisLine:&#123; //坐标 轴线 show:true, //是否显示坐标轴轴线 onZero:true, //X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效 lineStyle:mylineStyle &#125;, axisTick :&#123; //坐标轴刻度相关设置 show:true, //是否显示坐标轴刻度。 alignWithLabel:false, //类目轴中在 boundaryGap 为 true 的时候有效，可以保证刻度线和标签对齐 interval:auto, //坐标轴刻度的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //坐标轴刻度是否朝内，默认朝外。 length:5, //坐标轴刻度的长度。 lineStyle:mylineStyle // &#125;, axisLabel:&#123; //坐标轴刻度标签的相关设置 show:true, //是否显示 interval:&quot;auto&quot;, //坐标轴刻度标签的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //刻度标签是否朝内，默认朝外 rotate:0, //刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。旋转的角度从 -90 度到 90 度 margin:8, //刻度标签与轴线之间的距离 formatter: function (value, index) &#123; //使用函数模板，函数参数分别为刻度数值（类目），刻度的索引 return value+&quot;kg&quot;; &#125;, showMinLabel:null, //是否显示最小 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最小 tick 的 label） showMaxLabel:null, //是否显示最大 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最大 tick 的 label） textStyle:mytextStyle &#125;, data : [&apos;周一&apos;, &apos;周二&apos;, &apos;周三&apos;, &apos;周四&apos;, &apos;周五&apos;, &apos;周六&apos;, &apos;周日&apos;], //类目数据，在类目轴（type: &apos;category&apos;）中有效。 &#125;]; coordinate-polar.js文件为极坐标系的配置参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;polar=[&#123; show:true, //是否显示 zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 center:[&apos;50%&apos;, &apos;50%&apos;], //极坐标系的中心（圆心）坐标，像素值或百分比均可。设置成百分比，设置成百分比时第一项是相对于容器宽度，第二项是相对于容器高度 radius:[&apos;20%&apos;, &apos;70%&apos;], //数组的第一项是内半径，第二项是外半径。支持设置成百分比，相对于容器高宽中较小的一项的一半。 tooltip:&#123; //坐标系特定的 tooltip 设定 show:true, //是否显示提示框组件，包括提示框浮层和 axisPointer trigger:&quot;axis&quot;, //触发类型 none不触发 &apos;item&apos; 数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。 &apos;axis&apos; 坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。 position: [&apos;50%&apos;, &apos;50%&apos;], //提示框浮层的位置，默认不设置时位置会跟随鼠标的位置,[10, 10],回掉函数，inside鼠标所在图形的内部中心位置，top、left、bottom、right鼠标所在图形上侧，左侧，下侧，右侧， formatter:&quot;&#123;b0&#125;: &#123;c0&#125;&lt;br /&gt;&#123;b1&#125;: &#123;c1&#125;&quot;, //提示框浮层内容格式器，支持字符串模板和回调函数两种形式,模板变量有 &#123;a&#125;, &#123;b&#125;，&#123;c&#125;，&#123;d&#125;，&#123;e&#125;，分别表示系列名，数据名，数据值等 backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 padding:5, //图例内边距，单位px 5 [5, 10] [5,10,5,10] textStyle:mytextStyle, //文本样式 &#125;,&#125;];radiusAxis=[ &#123; show:true, //是否显示 x 轴 polarIndex :0, //x 轴所在的 grid 的索引，默认位于第一个 grid type:&quot;category&quot;, //坐标轴类型。&apos;value&apos; 数值轴，适用于连续数据。&apos;category&apos; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。 // &apos;time&apos; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。&apos;log&apos; 对数轴。适用于对数数据 name:&apos;时间&apos;, //坐标轴名称 nameLocation:&quot;end&quot;, //坐标轴名称显示位置。可选：&apos;start&apos;,&apos;middle&apos;,&apos;end&apos; nameTextStyle:mytextStyle, //坐标轴名称的文字样式 nameGap:15, //坐标轴名称与轴线之间的距离 nameRotate:0, //坐标轴名字旋转，角度值 inverse:false, //是否是反向坐标轴 boundaryGap:true, //类目轴中 boundaryGap 可以配置为 true 和 false。非类目轴，包括时间，数值，对数轴，boundaryGap是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置 min 和 max 后无效[&apos;20%&apos;, &apos;20%&apos;] min:null, //坐标轴刻度最小值。可以设置成特殊值 &apos;dataMin&apos;，此时取数据在该轴上的最小值作为最小刻度。不设置时会自动计算最小值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 max:null, //坐标轴刻度最大值。可以设置成特殊值 &apos;dataMax&apos;，此时取数据在该轴上的最大值作为最大刻度。不设置时会自动计算最大值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 scale:false, //只在数值轴中（type: &apos;value&apos;）有效。是否是脱离 0 值比例。设置成 true 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。在设置 min 和 max 之后该配置项无效。 splitNumber:5, //坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整 minInterval:0, //自动计算的坐标轴最小间隔大小,例如可以设置成1保证坐标轴分割刻度显示成整数。只在数值轴中（type: &apos;value&apos;）有效。 logBase:10, //对数轴的底数，只在对数轴中（type: &apos;log&apos;）有效 silent:false, //坐标轴是否是静态无法交互 triggerEvent:false, //坐标轴的标签是否响应和触发鼠标事件 axisLine:&#123; //坐标 轴线 show:true, //是否显示坐标轴轴线 onZero:true, //X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效 lineStyle:mylineStyle &#125;, axisTick :&#123; //坐标轴刻度相关设置 show:true, //是否显示坐标轴刻度。 alignWithLabel:false, //类目轴中在 boundaryGap 为 true 的时候有效，可以保证刻度线和标签对齐 interval:auto, //坐标轴刻度的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //坐标轴刻度是否朝内，默认朝外。 length:5, //坐标轴刻度的长度。 lineStyle:mylineStyle // &#125;, axisLabel:&#123; //坐标轴刻度标签的相关设置 show:true, //是否显示 interval:&quot;auto&quot;, //坐标轴刻度标签的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //刻度标签是否朝内，默认朝外 rotate:0, //刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。旋转的角度从 -90 度到 90 度 margin:8, //刻度标签与轴线之间的距离 formatter: function (value, index) &#123; //使用函数模板，函数参数分别为刻度数值（类目），刻度的索引 return value+&quot;kg&quot;; &#125;, showMinLabel:null, //是否显示最小 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最小 tick 的 label） showMaxLabel:null, //是否显示最大 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最大 tick 的 label） textStyle:mytextStyle &#125;, splitLine:&#123; //坐标轴在 grid 区域中的分隔线。 show:true, //是否显示分隔线。默认数值轴显示，类目轴不显示。 interval:&quot;auto&quot;, //坐标轴分隔线的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下： lineStyle:mylineStyle &#125;, splitArea:&#123; //坐标轴在 grid 区域中的分隔区域，默认不显示。 interval:&quot;auto&quot;, show:false, //是否显示分隔区域 areaStyle:myareaStyle &#125;, data : [&apos;周一&apos;, &apos;周二&apos;, &apos;周三&apos;, &apos;周四&apos;, &apos;周五&apos;, &apos;周六&apos;, &apos;周日&apos;], //类目数据，在类目轴（type: &apos;category&apos;）中有效。 zlevel:0, //X 轴所有图形的 zlevel 值。 z:0, //X 轴组件的所有图形的z值 &#125;];angleAxis=[&#123; //y轴配置内容同x轴 polarIndex:0, //角度轴所在的极坐标系的索引，默认使用第一个极坐标系 startAngle:90, //起始刻度的角度，默认为 90 度，即圆心的正上方。0 度为圆心的正右方。 clockwise:true, //刻度增长是否按顺时针，默认顺时针。 type:&quot;category&quot;, //坐标轴类型。&apos;value&apos; 数值轴，适用于连续数据。&apos;category&apos; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。 // &apos;time&apos; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。&apos;log&apos; 对数轴。适用于对数数据 inverse:false, //是否是反向坐标轴 boundaryGap:true, //类目轴中 boundaryGap 可以配置为 true 和 false。非类目轴，包括时间，数值，对数轴，boundaryGap是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置 min 和 max 后无效[&apos;20%&apos;, &apos;20%&apos;] min:null, //坐标轴刻度最小值。可以设置成特殊值 &apos;dataMin&apos;，此时取数据在该轴上的最小值作为最小刻度。不设置时会自动计算最小值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 max:null, //坐标轴刻度最大值。可以设置成特殊值 &apos;dataMax&apos;，此时取数据在该轴上的最大值作为最大刻度。不设置时会自动计算最大值保证坐标轴刻度的均匀分布。在类目轴中，也可以设置为类目的序数 scale:false, //只在数值轴中（type: &apos;value&apos;）有效。是否是脱离 0 值比例。设置成 true 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。在设置 min 和 max 之后该配置项无效。 splitNumber:5, //坐标轴的分割段数，需要注意的是这个分割段数只是个预估值，最后实际显示的段数会在这个基础上根据分割后坐标轴刻度显示的易读程度作调整 minInterval:0, //自动计算的坐标轴最小间隔大小,例如可以设置成1保证坐标轴分割刻度显示成整数。只在数值轴中（type: &apos;value&apos;）有效。 logBase:10, //对数轴的底数，只在对数轴中（type: &apos;log&apos;）有效 silent:false, //坐标轴是否是静态无法交互 triggerEvent:false, //坐标轴的标签是否响应和触发鼠标事件 axisLine:&#123; //坐标 轴线 show:true, //是否显示坐标轴轴线 onZero:true, //X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效 lineStyle:mylineStyle &#125;, axisTick :&#123; //坐标轴刻度相关设置 show:true, //是否显示坐标轴刻度。 alignWithLabel:false, //类目轴中在 boundaryGap 为 true 的时候有效，可以保证刻度线和标签对齐 interval:auto, //坐标轴刻度的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //坐标轴刻度是否朝内，默认朝外。 length:5, //坐标轴刻度的长度。 lineStyle:mylineStyle // &#125;, axisLabel:&#123; //坐标轴刻度标签的相关设置 show:true, //是否显示 interval:&quot;auto&quot;, //坐标轴刻度标签的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //刻度标签是否朝内，默认朝外 rotate:0, //刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。旋转的角度从 -90 度到 90 度 margin:8, //刻度标签与轴线之间的距离 formatter: function (value, index) &#123; //使用函数模板，函数参数分别为刻度数值（类目），刻度的索引 return value+&quot;kg&quot;; &#125;, showMinLabel:null, //是否显示最小 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最小 tick 的 label） showMaxLabel:null, //是否显示最大 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最大 tick 的 label） textStyle:mytextStyle &#125;, splitLine:&#123; //坐标轴在 grid 区域中的分隔线。 show:true, //是否显示分隔线。默认数值轴显示，类目轴不显示。 interval:&quot;auto&quot;, //坐标轴分隔线的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下： lineStyle:mylineStyle &#125;, splitArea:&#123; //坐标轴在 grid 区域中的分隔区域，默认不显示。 interval:&quot;auto&quot;, show:false, //是否显示分隔区域 areaStyle:myareaStyle &#125;, data : [&apos;周一&apos;, &apos;周二&apos;, &apos;周三&apos;, &apos;周四&apos;, &apos;周五&apos;, &apos;周六&apos;, &apos;周日&apos;], //类目数据，在类目轴（type: &apos;category&apos;）中有效。 zlevel:0, //所属图形的 zlevel 值。 z:0, //组件的所属图形的z值&#125;]; coordinate-radar.js文件为雷达坐标系的配置参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;radar=[&#123; center:[&apos;50%&apos;, &apos;50%&apos;], //中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标。支持设置成百分比，设置成百分比时第一项是相对于容器宽度，第二项是相对于容器高度。 radius:&quot;75%&quot;, //数组的第一项是内半径，第二项是外半径。支持设置成百分比，相对于容器高宽中较小的一项的一半。 startAngle:90, //起始刻度的角度，默认为 90 度，即圆心的正上方。0 度为圆心的正右方。 name:&#123; //雷达图每个指示器名称的配置项。 show:true, //是否显示指示器名称。 formatter:function (value, indicator) &#123; //用回调函数，第一个参数是指示器名称，第二个参数是指示器配置项 return &apos;【&apos; + value + &apos;】&apos;; &#125;, textStyle:mytextStyle &#125;, nameGap:15, //指示器名称和指示器轴的距离 splitNumber:5, //指示器轴的分割段数 scale:false, //只在数值轴中（type: &apos;value&apos;）有效。是否是脱离 0 值比例。设置成 true 后坐标刻度不会强制包含零刻度。在双数值轴的散点图中比较有用。在设置 min 和 max 之后该配置项无效。 shape:&quot;polygon&quot;, //雷达图绘制类型，支持 &apos;polygon&apos; 和 &apos;circle&apos;。 silent:false, //坐标轴是否是静态无法交互 triggerEvent:false, //坐标轴的标签是否响应和触发鼠标事件 axisLine:&#123; //坐标 轴线 show:true, //是否显示坐标轴轴线 onZero:true, //X 轴或者 Y 轴的轴线是否在另一个轴的 0 刻度上，只有在另一个轴为数值轴且包含 0 刻度时有效 lineStyle:mylineStyle &#125;, axisTick :&#123; //坐标轴刻度相关设置 show:true, //是否显示坐标轴刻度。 alignWithLabel:false, //类目轴中在 boundaryGap 为 true 的时候有效，可以保证刻度线和标签对齐 interval:auto, //坐标轴刻度的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //坐标轴刻度是否朝内，默认朝外。 length:5, //坐标轴刻度的长度。 lineStyle:mylineStyle // &#125;, axisLabel:&#123; //坐标轴刻度标签的相关设置 show:true, //是否显示 interval:&quot;auto&quot;, //坐标轴刻度标签的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推 inside:false, //刻度标签是否朝内，默认朝外 rotate:0, //刻度标签旋转的角度，在类目轴的类目标签显示不下的时候可以通过旋转防止标签之间重叠。旋转的角度从 -90 度到 90 度 margin:8, //刻度标签与轴线之间的距离 formatter: function (value, index) &#123; //使用函数模板，函数参数分别为刻度数值（类目），刻度的索引 return value+&quot;kg&quot;; &#125;, showMinLabel:null, //是否显示最小 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最小 tick 的 label） showMaxLabel:null, //是否显示最大 tick 的 label。可取值 true, false, null。默认自动判定（即如果标签重叠，不会显示最大 tick 的 label） textStyle:mytextStyle &#125;, splitLine:&#123; //坐标轴在 grid 区域中的分隔线。 show:true, //是否显示分隔线。默认数值轴显示，类目轴不显示。 interval:&quot;auto&quot;, //坐标轴分隔线的显示间隔，在类目轴中有效。默认会采用标签不重叠的策略间隔显示标签。可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，可以用数值表示间隔的数据，也可以通过回调函数控制。回调函数格式如下： lineStyle:mylineStyle &#125;, splitArea:&#123; //坐标轴在 grid 区域中的分隔区域，默认不显示。 interval:&quot;auto&quot;, show:false, //是否显示分隔区域 areaStyle:myareaStyle &#125;, indicator: [ //雷达图的指示器，用来指定雷达图中的多个变量（维度） &#123; name: &apos;销售（sales）&apos;, max: 6500&#125;, &#123; name: &apos;管理（Administration）&apos;, max: 16000&#125;, &#123; name: &apos;信息技术（Information Techology）&apos;, max: 30000&#125;, &#123; name: &apos;客服（Customer Support）&apos;, max: 38000&#125;, &#123; name: &apos;研发（Development）&apos;, max: 52000&#125;, &#123; name: &apos;市场（Marketing）&apos;, max: 25000&#125; ], zlevel:0, //所属图形的 zlevel 值。 z:0, //组件的所属图形的z值&#125;]; index.js文件为图表颜色、背景、标题、提示框、工具框、图例、缩放设置、视觉映射等内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327/*chart 是指一个完整的图表，如折线图，饼图等“基本”图表类型或由基本图表组合而成的“混搭”图表，可能包括坐标轴、图例等 axis 直角坐标系中的一个坐标轴，坐标轴可分为类目轴和数值轴 xAxis 直角坐标系中的横轴，通常并默认为类目轴 yAxis 直角坐标系中的纵轴，通常并默认为数值轴 grid 直角坐标系中除坐标轴外的绘图网格 legend 图例，表述数据和图形的关联 dataRange 值域选择，常用于展现地域数据时选择值域范围 dataZoom 数据区域缩放，常用于展现大数据时选择可视范围 toolbox 辅助工具箱，辅助功能，如添加标线，框选缩放等 tooltip 气泡提示框，常用于展现更详细的数据 timeline 时间轴，常用于展现同一组数据在时间维度上的多份数据 series 数据系列，一个图表可能包含多个系列，每一个系列可能包含多个数据 line 折线图，堆积折线图，区域图，堆积区域图。 bar 柱形图（纵向），堆积柱形图，条形图（横向），堆积条形图。 scatter 散点图，气泡图。散点图至少需要横纵两个数据，更高维度数据加入时可以映射为颜色或大小，当映射到大小时则为气泡图 k K线图，蜡烛图。常用于展现股票交易数据。 pie 饼图，圆环图。饼图支持两种（半径、面积）南丁格尔玫瑰图模式。 radar 雷达图，填充雷达图。高维度数据展现的常用图表。 chord 和弦图。常用于展现关系数据，外层为圆环图，可体现数据占比关系，内层为各个扇形间相互连接的弦，可体现关系数据 force 力导布局图。常用于展现复杂关系网络聚类布局。 map 地图。内置世界地图、中国及中国34个省市自治区地图数据、可通过标准GeoJson扩展地图类型。支持svg扩展类地图应用，如室内地图、运动场、物件构造等。*/color=[&apos;#c23531&apos;,&apos;#2f4554&apos;, &apos;#61a0a8&apos;, &apos;#d48265&apos;, &apos;#91c7ae&apos;,&apos;#749f83&apos;, &apos;#ca8622&apos;, &apos;#bda29a&apos;,&apos;#6e7074&apos;, &apos;#546570&apos;, &apos;#c4ccd3&apos;];//调色盘颜色列表。如果系列没有设置颜色，则会依次循环从该列表中取颜色作为系列颜色backgroundColor=&quot;#000000&quot;; //背景色，默认无背景。 &apos;rgb(128, 128, 128)&apos;， &apos;rgba(128, 128, 128, 0.5)&apos;，除了纯色之外颜色也支持渐变色和纹理填充mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;title=&#123; show:true, //是否显示 text:&quot;大标题&quot;, //大标题 subtext:&quot;小标题&quot;, //小标题 sublink:&quot;http://www.baidu.com&quot;, //小标题链接 target:&quot;blank&quot;, //&apos;self&apos; 当前窗口打开，&apos;blank&apos; 新窗口打开 subtarget:&quot;blank&quot;, //小标题打开链接的窗口 textAlign:&quot;center&quot;, //文本水平对齐 textBaseline:&quot;top&quot;, //文本垂直对齐 textStyle:mytextStyle, //标题样式 subtextStyle:mytextStyle, //小标题样式 padding:5, //标题内边距 5 [5, 10] [5,10,5,10] itemGap:10, //大小标题间距 zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 left:&quot;center&quot;, //组件离容器左侧的距离,&apos;left&apos;, &apos;center&apos;, &apos;right&apos;,&apos;20%&apos; top:&quot;top&quot;, //组件离容器上侧的距离,&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;,&apos;20%&apos; right:&quot;auto&quot;, //组件离容器右侧的距离,&apos;20%&apos; bottom:&quot;auto&quot;, //组件离容器下侧的距离,&apos;20%&apos; backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //阴影的模糊大小&#125;;tooltip =&#123; //提示框组件 trigger: &apos;item&apos;, //触发类型,&apos;item&apos;数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。 &apos;axis&apos;坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用。 triggerOn:&quot;mousemove&quot;, //提示框触发的条件,&apos;mousemove&apos;鼠标移动时触发。&apos;click&apos;鼠标点击时触发。&apos;mousemove|click&apos;同时鼠标移动和点击时触发。&apos;none&apos;不在 &apos;mousemove&apos; 或 &apos;click&apos; 时触发 showContent:true, //是否显示提示框浮层 alwaysShowContent:true, //是否永远显示提示框内容 showDelay:0, //浮层显示的延迟，单位为 ms hideDelay:100, //浮层隐藏的延迟，单位为 ms enterable:false, //鼠标是否可进入提示框浮层中 confine:false, //是否将 tooltip 框限制在图表的区域内 transitionDuration:0.4, //提示框浮层的移动动画过渡时间，单位是 s,设置为 0 的时候会紧跟着鼠标移动 position:[&apos;50%&apos;, &apos;50%&apos;], //提示框浮层的位置，默认不设置时位置会跟随鼠标的位置,[10, 10],回掉函数，inside鼠标所在图形的内部中心位置，top、left、bottom、right鼠标所在图形上侧，左侧，下侧，右侧， formatter:&quot;&#123;b0&#125;: &#123;c0&#125;&lt;br /&gt;&#123;b1&#125;: &#123;c1&#125;&quot;, //提示框浮层内容格式器，支持字符串模板和回调函数两种形式,模板变量有 &#123;a&#125;, &#123;b&#125;，&#123;c&#125;，&#123;d&#125;，&#123;e&#125;，分别表示系列名，数据名，数据值等 backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 padding:5, //图例内边距，单位px 5 [5, 10] [5,10,5,10] textStyle:mytextStyle, //文本样式&#125;;toolbox=&#123; show : true, //是否显示工具栏组件 orient:&quot;horizontal&quot;, //工具栏 icon 的布局朝向&apos;horizontal&apos; &apos;vertical&apos; itemSize:15, //工具栏 icon 的大小 itemGap:10, //工具栏 icon 每项之间的间隔 showTitle:true, //是否在鼠标 hover 的时候显示每个工具 icon 的标题 feature : &#123; mark : &#123; // &apos;辅助线开关&apos; show: true &#125;, dataView : &#123; //数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新 show: true, //是否显示该工具。 title:&quot;数据视图&quot;, readOnly: false, //是否不可编辑（只读） lang: [&apos;数据视图&apos;, &apos;关闭&apos;, &apos;刷新&apos;], //数据视图上有三个话术，默认是[&apos;数据视图&apos;, &apos;关闭&apos;, &apos;刷新&apos;] backgroundColor:&quot;#fff&quot;, //数据视图浮层背景色。 textareaColor:&quot;#fff&quot;, //数据视图浮层文本输入区背景色 textareaBorderColor:&quot;#333&quot;, //数据视图浮层文本输入区边框颜色 textColor:&quot;#000&quot;, //文本颜色。 buttonColor:&quot;#c23531&quot;, //按钮颜色。 buttonTextColor:&quot;#fff&quot;, //按钮文本颜色。 &#125;, magicType: &#123; //动态类型切换 show: true, title:&quot;切换&quot;, //各个类型的标题文本，可以分别配置。 type: [&apos;line&apos;, &apos;bar&apos;], //启用的动态类型，包括&apos;line&apos;（切换为折线图）, &apos;bar&apos;（切换为柱状图）, &apos;stack&apos;（切换为堆叠模式）, &apos;tiled&apos;（切换为平铺模式） &#125;, restore : &#123; //配置项还原。 show: true, //是否显示该工具。 title:&quot;还原&quot;, &#125;, saveAsImage : &#123; //保存为图片。 show: true, //是否显示该工具。 type:&quot;png&quot;, //保存的图片格式。支持 &apos;png&apos; 和 &apos;jpeg&apos;。 name:&quot;pic1&quot;, //保存的文件名称，默认使用 title.text 作为名称 backgroundColor:&quot;#ffffff&quot;, //保存的图片背景色，默认使用 backgroundColor，如果backgroundColor不存在的话会取白色 title:&quot;保存为图片&quot;, pixelRatio:1 //保存图片的分辨率比例，默认跟容器相同大小，如果需要保存更高分辨率的，可以设置为大于 1 的值，例如 2 &#125;, dataZoom :&#123; //数据区域缩放。目前只支持直角坐标系的缩放 show: true, //是否显示该工具。 title:&quot;缩放&quot;, //缩放和还原的标题文本 xAxisIndex:0, //指定哪些 xAxis 被控制。如果缺省则控制所有的x轴。如果设置为 false 则不控制任何x轴。如果设置成 3 则控制 axisIndex 为 3 的x轴。如果设置为 [0, 3] 则控制 axisIndex 为 0 和 3 的x轴 yAxisIndex:false, //指定哪些 yAxis 被控制。如果缺省则控制所有的y轴。如果设置为 false 则不控制任何y轴。如果设置成 3 则控制 axisIndex 为 3 的y轴。如果设置为 [0, 3] 则控制 axisIndex 为 0 和 3 的y轴 &#125;, &#125;, zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 left:&quot;center&quot;, //组件离容器左侧的距离,&apos;left&apos;, &apos;center&apos;, &apos;right&apos;,&apos;20%&apos; top:&quot;top&quot;, //组件离容器上侧的距离,&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;,&apos;20%&apos; right:&quot;auto&quot;, //组件离容器右侧的距离,&apos;20%&apos; bottom:&quot;auto&quot;, //组件离容器下侧的距离,&apos;20%&apos; width:&quot;auto&quot;, //图例宽度 height:&quot;auto&quot;, //图例高度&#125;;legend=&#123; show:true, //是否显示 zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 left:&quot;center&quot;, //组件离容器左侧的距离,&apos;left&apos;, &apos;center&apos;, &apos;right&apos;,&apos;20%&apos; top:&quot;top&quot;, //组件离容器上侧的距离,&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;,&apos;20%&apos; right:&quot;auto&quot;, //组件离容器右侧的距离,&apos;20%&apos; bottom:&quot;auto&quot;, //组件离容器下侧的距离,&apos;20%&apos; width:&quot;auto&quot;, //图例宽度 height:&quot;auto&quot;, //图例高度 orient:&quot;horizontal&quot;, //图例排列方向 align:&quot;auto&quot;, //图例标记和文本的对齐,left,right padding:5, //图例内边距，单位px 5 [5, 10] [5,10,5,10] itemGap:10, //图例每项之间的间隔 itemWidth:25, //图例标记的图形宽度 itemHeight:14, //图例标记的图形高度 formatter:function (name) &#123; //用来格式化图例文本，支持字符串模板和回调函数两种形式。模板变量为图例名称 &#123;name&#125; return &apos;Legend &apos; + name; &#125;, selectedMode:&quot;single&quot;, //图例选择的模式,true开启,false关闭,single单选,multiple多选 inactiveColor:&quot;#ccc&quot;, //图例关闭时的颜色 textStyle:mytextStyle, //文本样式 data:[&apos;类别1&apos;, &apos;类别2&apos;, &apos;类别3&apos;], //series中根据名称区分 backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //阴影的模糊大小&#125;;dataZoom=[ //区域缩放 &#123; id: &apos;dataZoomX&apos;, show:true, //是否显示 组件。如果设置为 false，不会显示，但是数据过滤的功能还存在。 backgroundColor:&quot;rgba(47,69,84,0)&quot;, //组件的背景颜色 type: &apos;slider&apos;, //slider表示有滑动块的，inside表示内置的 dataBackground:&#123; //数据阴影的样式。 lineStyle:mylineStyle, //阴影的线条样式 areaStyle:myareaStyle, //阴影的填充样式 &#125;, fillerColor:&quot;rgba(167,183,204,0.4)&quot;, //选中范围的填充颜色。 borderColor:&quot;#ddd&quot;, //边框颜色。 filterMode: &apos;filter&apos;, //&apos;filter&apos;：当前数据窗口外的数据，被 过滤掉。即 会 影响其他轴的数据范围。每个数据项，只要有一个维度在数据窗口外，整个数据项就会被过滤掉。 //&apos;weakFilter&apos;：当前数据窗口外的数据，被 过滤掉。即 会 影响其他轴的数据范围。每个数据项，只有当全部维度都在数据窗口同侧外部，整个数据项才会被过滤掉。 //&apos;empty&apos;：当前数据窗口外的数据，被 设置为空。即 不会 影响其他轴的数据范围。 //&apos;none&apos;: 不过滤数据，只改变数轴范围。 xAxisIndex:0, //设置 dataZoom-inside 组件控制的 x轴,可以用数组表示多个轴 yAxisIndex:[0,2], //设置 dataZoom-inside 组件控制的 y轴,可以用数组表示多个轴 radiusAxisIndex:3, //设置 dataZoom-inside 组件控制的 radius 轴,可以用数组表示多个轴 angleAxisIndex:[0,2], //设置 dataZoom-inside 组件控制的 angle 轴,可以用数组表示多个轴 start: 30, //数据窗口范围的起始百分比,表示30% end: 70, //数据窗口范围的结束百分比,表示70% startValue:10, //数据窗口范围的起始数值 endValue:100, //数据窗口范围的结束数值。 orient:&quot;horizontal&quot;, //布局方式是横还是竖。不仅是布局方式，对于直角坐标系而言，也决定了，缺省情况控制横向数轴还是纵向数轴。&apos;horizontal&apos;：水平。&apos;vertical&apos;：竖直。 zoomLock:false, //是否锁定选择区域（或叫做数据窗口）的大小。如果设置为 true 则锁定选择区域的大小，也就是说，只能平移，不能缩放。 throttle:100, //设置触发视图刷新的频率。单位为毫秒（ms）。 zoomOnMouseWheel:true, //如何触发缩放。可选值为：true：表示不按任何功能键，鼠标滚轮能触发缩放。false：表示鼠标滚轮不能触发缩放。&apos;shift&apos;：表示按住 shift 和鼠标滚轮能触发缩放。&apos;ctrl&apos;：表示按住 ctrl 和鼠标滚轮能触发缩放。&apos;alt&apos;：表示按住 alt 和鼠标滚轮能触发缩放。 moveOnMouseMove:true, //如何触发数据窗口平移。true：表示不按任何功能键，鼠标移动能触发数据窗口平移。false：表示鼠标滚轮不能触发缩放。&apos;shift&apos;：表示按住 shift 和鼠标移动能触发数据窗口平移。&apos;ctrl&apos;：表示按住 ctrl 和鼠标移动能触发数据窗口平移。&apos;alt&apos;：表示按住 alt 和鼠标移动能触发数据窗口平移。 left:&quot;center&quot;, //组件离容器左侧的距离,&apos;left&apos;, &apos;center&apos;, &apos;right&apos;,&apos;20%&apos; top:&quot;top&quot;, //组件离容器上侧的距离,&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;,&apos;20%&apos; right:&quot;auto&quot;, //组件离容器右侧的距离,&apos;20%&apos; bottom:&quot;auto&quot;, //组件离容器下侧的距离,&apos;20%&apos; &#125;, &#123; id: &apos;dataZoomY&apos;, type: &apos;inside&apos;, filterMode: &apos;empty&apos;, disabled:false, //是否停止组件的功能。 xAxisIndex:0, //设置 dataZoom-inside 组件控制的 x轴,可以用数组表示多个轴 yAxisIndex:[0,2], //设置 dataZoom-inside 组件控制的 y轴,可以用数组表示多个轴 radiusAxisIndex:3, //设置 dataZoom-inside 组件控制的 radius 轴,可以用数组表示多个轴 angleAxisIndex:[0,2], //设置 dataZoom-inside 组件控制的 angle 轴,可以用数组表示多个轴 start: 30, //数据窗口范围的起始百分比,表示30% end: 70, //数据窗口范围的结束百分比,表示70% startValue:10, //数据窗口范围的起始数值 endValue:100, //数据窗口范围的结束数值。 orient:&quot;horizontal&quot;, //布局方式是横还是竖。不仅是布局方式，对于直角坐标系而言，也决定了，缺省情况控制横向数轴还是纵向数轴。&apos;horizontal&apos;：水平。&apos;vertical&apos;：竖直。 zoomLock:false, //是否锁定选择区域（或叫做数据窗口）的大小。如果设置为 true 则锁定选择区域的大小，也就是说，只能平移，不能缩放。 throttle:100, //设置触发视图刷新的频率。单位为毫秒（ms）。 zoomOnMouseWheel:true, //如何触发缩放。可选值为：true：表示不按任何功能键，鼠标滚轮能触发缩放。false：表示鼠标滚轮不能触发缩放。&apos;shift&apos;：表示按住 shift 和鼠标滚轮能触发缩放。&apos;ctrl&apos;：表示按住 ctrl 和鼠标滚轮能触发缩放。&apos;alt&apos;：表示按住 alt 和鼠标滚轮能触发缩放。 moveOnMouseMove:true, //如何触发数据窗口平移。true：表示不按任何功能键，鼠标移动能触发数据窗口平移。false：表示鼠标滚轮不能触发缩放。&apos;shift&apos;：表示按住 shift 和鼠标移动能触发数据窗口平移。&apos;ctrl&apos;：表示按住 ctrl 和鼠标移动能触发数据窗口平移。&apos;alt&apos;：表示按住 alt 和鼠标移动能触发数据窗口平移。 &#125;];visualMap=[ //视觉映射组件，用于进行『视觉编码』，也就是将数据映射到视觉元素。视觉元素可以是：symbol: 图元的图形类别。symbolSize: 图元的大小。color: 图元的颜色。 // colorAlpha: 图元的颜色的透明度。opacity: 图元以及其附属物（如文字标签）的透明度。colorLightness: 颜色的明暗度。colorSaturation: 颜色的饱和度。colorHue: 颜色的色调。 &#123; show:true, //是否显示 visualMap-continuous 组件。如果设置为 false，不会显示，但是数据映射的功能还存在 type: &apos;continuous&apos;, // 定义为连续型 viusalMap min:10, //指定 visualMapContinuous 组件的允许的最小值 max:100, //指定 visualMapContinuous 组件的允许的最大值 range:[15, 40], //指定手柄对应数值的位置。range 应在 min max 范围内 calculable:true, //是否显示拖拽用的手柄（手柄能拖拽调整选中范围） realtime:true, //拖拽时，是否实时更新 inverse:false, //是否反转 visualMap 组件 precision:0, //数据展示的小数精度，默认为0，无小数点 itemWidth:20, //图形的宽度，即长条的宽度。 itemHeight:140, //图形的高度，即长条的高度。 align:&quot;auto&quot;, //指定组件中手柄和文字的摆放位置.可选值为：&apos;auto&apos; 自动决定。&apos;left&apos; 手柄和label在右。&apos;right&apos; 手柄和label在左。&apos;top&apos; 手柄和label在下。&apos;bottom&apos; 手柄和label在上。 text:[&apos;High&apos;, &apos;Low&apos;], //两端的文本 textGap:10, //两端文字主体之间的距离，单位为px dimension:2, //指定用数据的『哪个维度』，映射到视觉元素上。『数据』即 series.data。 可以把 series.data 理解成一个二维数组,其中每个列是一个维度,默认取 data 中最后一个维度 seriesIndex:1, //指定取哪个系列的数据，即哪个系列的 series.data,默认取所有系列 hoverLink:true, //鼠标悬浮到 visualMap 组件上时，鼠标位置对应的数值 在 图表中对应的图形元素，会高亮 inRange:&#123; //定义 在选中范围中 的视觉元素 color: [&apos;#121122&apos;, &apos;rgba(3,4,5,0.4)&apos;, &apos;red&apos;], symbolSize: [30, 100] &#125;, outOfRange:&#123; //定义 在选中范围外 的视觉元素。 color: [&apos;#121122&apos;, &apos;rgba(3,4,5,0.4)&apos;, &apos;red&apos;], symbolSize: [30, 100] &#125;, zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 left:&quot;center&quot;, //组件离容器左侧的距离,&apos;left&apos;, &apos;center&apos;, &apos;right&apos;,&apos;20%&apos; top:&quot;top&quot;, //组件离容器上侧的距离,&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;,&apos;20%&apos; right:&quot;auto&quot;, //组件离容器右侧的距离,&apos;20%&apos; bottom:&quot;auto&quot;, //组件离容器下侧的距离,&apos;20%&apos; orient:&quot;vertical&quot;, //图例排列方向 padding:5, //图例内边距，单位px 5 [5, 10] [5,10,5,10] backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 textStyle:mytextStyle, //文本样式 formatter: function (value) &#123; //标签的格式化工具。 return &apos;aaaa&apos; + value; // 范围标签显示内容。 &#125; &#125;, &#123; show:true, //是否显示 visualMap-continuous 组件。如果设置为 false，不会显示，但是数据映射的功能还存在 type: &apos;piecewise&apos;, // 定义为分段型 visualMap splitNumber:5, //对于连续型数据，自动平均切分成几段。默认为5段 pieces: [ //自定义『分段式视觉映射组件（visualMapPiecewise）』的每一段的范围，以及每一段的文字，以及每一段的特别的样式 &#123;min: 1500&#125;, // 不指定 max，表示 max 为无限大（Infinity）。 &#123;min: 900, max: 1500&#125;, &#123;min: 310, max: 1000&#125;, &#123;min: 200, max: 300&#125;, &#123;min: 10, max: 200, label: &apos;10 到 200（自定义label）&apos;&#125;, &#123;value: 123, label: &apos;123（自定义特殊颜色）&apos;, color: &apos;grey&apos;&#125;, // 表示 value 等于 123 的情况。 &#123;max: 5&#125; // 不指定 min，表示 min 为无限大（-Infinity）。 ], categories:[&apos;严重污染&apos;, &apos;重度污染&apos;, &apos;中度污染&apos;, &apos;轻度污染&apos;, &apos;良&apos;, &apos;优&apos;], //用于表示离散型数据（或可以称为类别型数据、枚举型数据）的全集 min:10, //指定 visualMapContinuous 组件的允许的最小值 max:100, //指定 visualMapContinuous 组件的允许的最大值 minOpen:true, //界面上会额外多出一个『&lt; min』的选块 maxOpen:true, //界面上会额外多出一个『&gt; max』的选块。 selectedMode:&quot;multiple&quot;, //选择模式，可以是：&apos;multiple&apos;（多选）。&apos;single&apos;（单选）。 inverse:false, //是否反转 visualMap 组件 precision:0, //数据展示的小数精度，默认为0，无小数点 itemWidth:20, //图形的宽度，即长条的宽度。 itemHeight:140, //图形的高度，即长条的高度。 align:&quot;auto&quot;, //指定组件中手柄和文字的摆放位置.可选值为：&apos;auto&apos; 自动决定。&apos;left&apos; 手柄和label在右。&apos;right&apos; 手柄和label在左。&apos;top&apos; 手柄和label在下。&apos;bottom&apos; 手柄和label在上。 text:[&apos;High&apos;, &apos;Low&apos;], //两端的文本 textGap:10, //两端文字主体之间的距离，单位为px showLabel:true, //是否显示每项的文本标签 itemGap:10, //每两个图元之间的间隔距离，单位为px itemSymbol:&quot;roundRect&quot;, //默认的图形。可选值为： &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; dimension:2, //指定用数据的『哪个维度』，映射到视觉元素上。『数据』即 series.data。 可以把 series.data 理解成一个二维数组,其中每个列是一个维度,默认取 data 中最后一个维度 seriesIndex:1, //指定取哪个系列的数据，即哪个系列的 series.data,默认取所有系列 hoverLink:true, //鼠标悬浮到 visualMap 组件上时，鼠标位置对应的数值 在 图表中对应的图形元素，会高亮 inRange:&#123; //定义 在选中范围中 的视觉元素 color: [&apos;#121122&apos;, &apos;rgba(3,4,5,0.4)&apos;, &apos;red&apos;], symbolSize: [30, 100] &#125;, outOfRange:&#123; //定义 在选中范围外 的视觉元素。 color: [&apos;#121122&apos;, &apos;rgba(3,4,5,0.4)&apos;, &apos;red&apos;], symbolSize: [30, 100] &#125;, zlevel:0, //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面 z:2, //所属组件的z分层，z值小的图形会被z值大的图形覆盖 left:&quot;center&quot;, //组件离容器左侧的距离,&apos;left&apos;, &apos;center&apos;, &apos;right&apos;,&apos;20%&apos; top:&quot;top&quot;, //组件离容器上侧的距离,&apos;top&apos;, &apos;middle&apos;, &apos;bottom&apos;,&apos;20%&apos; right:&quot;auto&quot;, //组件离容器右侧的距离,&apos;20%&apos; bottom:&quot;auto&quot;, //组件离容器下侧的距离,&apos;20%&apos; orient:&quot;vertical&quot;, //图例排列方向 padding:5, //图例内边距，单位px 5 [5, 10] [5,10,5,10] backgroundColor:&quot;transparent&quot;, //标题背景色 borderColor:&quot;#ccc&quot;, //边框颜色 borderWidth:0, //边框线宽 textStyle:mytextStyle, //文本样式 formatter: function (value) &#123; //标签的格式化工具。 return &apos;aaaa&apos; + value; // 范围标签显示内容。 &#125; &#125;]; series-bar.js文件为柱形图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;bar&quot;, //柱形 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 legendHoverLink:true, //是否启用图例 hover 时的联动高亮。 coordinateSystem:&quot;cartesian2d&quot;,////&apos;cartesian2d&apos;使用二维的直角坐标系。&apos;geo&apos;使用地理坐标系 xAxisIndex:0, //使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。 yAxisIndex:0, //使用的 y 轴的 index，在单个图表实例中存在多个 y轴的时候有用。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:myitemStyle, emphasis:myitemStyle, &#125;, stack:null, //数据堆叠，同个类目轴上系列配置相同的stack值可以堆叠放置。 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 barGap:&quot;30%&quot;, //柱间距离，可设固定值（如 20）或者百分比（如 &apos;30%&apos;，表示柱子宽度的 30%）。 barCategoryGap:&quot;20%&quot;, //类目间柱形距离，默认为类目间距的20%，可设固定值 encode: &#123; //可以定义 data 的哪个维度被编码成什么 x: [3, 1, 5], // 表示维度 3、1、5 映射到 x 轴。 y: 2, // 表示维度 2 映射到 y 轴。 tooltip: [3, 2, 4], // 表示维度 3、2、4 会在 tooltip 中显示。 label: 3 // 表示 label 使用维度 3。 &#125;, data: [ //每一列称为一个『维度』。维度下标从0开始 [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], ], markPoint:mypoint.data=[ &#123;name: &apos;最大值&apos;, type: &apos;max&apos;&#125;, &#123;name: &apos;某个坐标&apos;, coord: [10, 20]&#125;, &#123;name: &apos;固定 x 像素位置&apos;, yAxis: 10, x: &apos;90%&apos;&#125;, &#123;name: &apos;某个屏幕坐标&apos;, x: 100, y: 100&#125;], markLine:myline.data=[ &#123;name: &apos;平均线&apos;,type: &apos;average&apos;&#125;, // 支持 &apos;average&apos;, &apos;min&apos;, &apos;max&apos; &#123;name: &apos;Y 轴值为 100 的水平线&apos;,yAxis: 100&#125;, [ &#123;name: &apos;最小值到最大值&apos;, type: &apos;min&apos;&#125;, // 起点和终点的项会共用一个 name &#123;type: &apos;max&apos;&#125; ], [ &#123;name: &apos;两个坐标之间的标线&apos;,coord: [10, 20]&#125;, &#123;coord: [20, 30]&#125; ], [ &#123;yAxis: &apos;max&apos;,x: &apos;90%&apos;&#125;, // 固定起点的 x 像素位置，用于模拟一条指向最大值的水平线 &#123;type: &apos;max&apos;&#125; ], [ &#123; name: &apos;两个屏幕坐标之间的标线&apos;,x: 100,y: 100&#125;, &#123;x: 500,y: 200&#125; ] ], markArea:myarea.data=[ [ &#123;name: &apos;平均值到最大值&apos;,type: &apos;average&apos;&#125;, &#123;type: &apos;max&apos;&#125; ], [ &#123;name: &apos;两个坐标之间的标域&apos;,coord: [10, 20]&#125;, &#123;coord: [20, 30]&#125; ], [ &#123;name: &apos;60分到80分&apos;,yAxis: 60&#125;, &#123;yAxis: 80&#125; ], [ &#123;name: &apos;所有数据范围区间&apos;,coord: [&apos;min&apos;, &apos;min&apos;]&#125;, &#123;coord: [&apos;max&apos;, &apos;max&apos;]&#125; ], [ &#123;name: &apos;两个屏幕坐标之间的标域&apos;,x: 100,y: 100&#125;, &#123;x: &apos;90%&apos;,y: &apos;10%&apos;&#125; ] ], tooltip:tooltip, //index.js中定义的&#125;,]; series-effectscatter.js文件为特效散点图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;effectScatter&quot;, //特效散点图 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 legendHoverLink:true, //是否启用图例 hover 时的联动高亮。 hoverAnimation:true, //是否开启鼠标 hover 的提示动画效果。 effectType:&quot;ripple&quot;, //特效类型，目前只支持涟漪特效&apos;ripple&apos;。 showEffectOn:&quot;render&quot;, //配置何时显示特效。可选：&apos;render&apos; 绘制完成后显示特效。&apos;emphasis&apos; 高亮（hover）的时候显示特效。 rippleEffect:&#123; //涟漪特效相关配置。 period:4, //动画的时间。 scale:2.5, //动画中波纹的最大缩放比例。 brushType:&apos;fill&apos;, //波纹的绘制方式，可选 &apos;stroke&apos; 和 &apos;fill&apos;。 &#125;, coordinateSystem:&quot;geo&quot;, //&apos;cartesian2d&apos;使用二维的直角坐标系。&apos;geo&apos;使用地理坐标系 xAxisIndex:0, //使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。 yAxisIndex:0, //使用的 y 轴的 index，在单个图表实例中存在多个 y轴的时候有用。 polarIndex:0, //使用的极坐标系的 index，在单个图表实例中存在多个极坐标系的时候有用。 geoIndex:0, //使用的地理坐标系的 index，在单个图表实例中存在多个地理坐标系的时候有用。 calendarIndex:0, //使用的日历坐标系的 index，在单个图表实例中存在多个日历坐标系的时候有用。 symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 large:false, //是否开启大规模散点图的优化，在数据图形特别多的时候（&gt;=5k）可以开启。开启后配合 largeThreshold 在数据量大于指定阈值的时候对绘制进行优化。缺点：优化后不能自定义设置单个数据项的样式。 largeThreshold:2000, //开启绘制优化的阈值。 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:myitemStyle, emphasis:myitemStyle, &#125;, encode: &#123; //可以定义 data 的哪个维度被编码成什么 x: [3, 1, 5], // 表示维度 3、1、5 映射到 x 轴。 y: 2, // 表示维度 2 映射到 y 轴。 tooltip: [3, 2, 4], // 表示维度 3、2、4 会在 tooltip 中显示。 label: 3 // 表示 label 使用维度 3。 &#125;, data: [ //每一列称为一个『维度』。维度下标从0开始 [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], ], //markPoint:同bar //markLine:同bar //markArea:同bar tooltip:tooltip //index.js&#125;,]; series-graph.js文件为关系图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;graph&quot;, //关系图 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 left:&quot;10%&quot;, //组件离容器左侧的距离,百分比字符串或整型数字 top:60, //组件离容器上侧的距离，百分比字符串或整型数字 right:&quot;auto&quot;, //组件离容器右侧的距离,百分比字符串或整型数字 bottom:&quot;auto&quot;, //组件离容器下侧的距离,百分比字符串或整型数字 width:&quot;auto&quot;, //图例宽度 height:&quot;auto&quot;, //图例高度 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 legendHoverLink:true, //是否启用图例 hover 时的联动高亮。 hoverAnimation:true, //是否开启鼠标 hover 节点的提示动画效果。 coordinateSystem:null, //null无坐标系，&apos;cartesian2d&apos;使用二维的直角坐标系。&apos;geo&apos;使用地理坐标系，&apos;polar&apos;使用极坐标系 xAxisIndex:0, //使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。 yAxisIndex:0, //使用的 y 轴的 index，在单个图表实例中存在多个 y轴的时候有用。 polarIndex:0, //使用的极坐标系的 index，在单个图表实例中存在多个极坐标系的时候有用。 geoIndex:0, //使用的地理坐标系的 index，在单个图表实例中存在多个地理坐标系的时候有用。 calendarIndex:0, //使用的日历坐标系的 index，在单个图表实例中存在多个日历坐标系的时候有用。 layout:&apos;none&apos;, //&apos;none&apos; 不采用任何布局，使用节点中提供的 x， y 作为节点的位置.&apos;circular&apos; 采用环形布局，&apos;force&apos; 采用力引导布局。 //circular:&#123;&#125;, //环形布局相关配置 //force:&#123;&#125;, //力引导布局相关的配置项 roam:false, //是否开启鼠标缩放和平移漫游。默认不开启。如果只想要开启缩放或者平移，可以设置成 &apos;scale&apos; 或者 &apos;move&apos;。设置成 true 为都开启 nodeScaleRatio:0.6, //鼠标漫游缩放时节点的相应缩放比例，当设为0时节点不随着鼠标的缩放而缩放 draggable:false, //节点是否可拖拽，只在使用力引导布局的时候有用。 focusNodeAdjacency:true, //是否在鼠标移到节点上的时候突出显示节点以及节点的边和邻接节点。 symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 edgeSymbol:[&apos;circle&apos;, &apos;arrow&apos;],//边两端的标记类型，可以是一个数组分别指定两端，也可以是单个统一指定。默认不显示标记，常见的可以设置为箭头 edgeSymbolSize:[5,2], //边两端的标记大小，可以是一个数组分别指定两端，也可以是单个统一指定。 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, edgeLabel:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:myitemStyle, emphasis:myitemStyle, &#125;, lineStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:mylineStyle, emphasis:mylineStyle, &#125;, categories:[ //节点分类的类目，可选。 &#123; name:&quot;类目名称&quot;, //类目名称 symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:myitemStyle, emphasis:myitemStyle, &#125;, &#125; ], data: [ //data就是node &#123; name: &apos;1&apos;, x: 10, y: 10, value: 10 &#125;, &#123; name: &apos;2&apos;, x: 100, y: 100, value: 20, symbolSize: 20, itemStyle: &#123; normal: &#123; color: &apos;red&apos; &#125; &#125; &#125; ], links:[ //links就是edges &#123; source: &apos;n1&apos;, target: &apos;n2&apos; &#125;, &#123; source: &apos;n2&apos;, target: &apos;n3&apos; &#125; ], //markPoint:同bar //markLine:同bar //markArea:同bar tooltip:tooltip //index.js&#125;,]; series-heatmap.js文件为热力图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;heatmap&quot;, //热力图 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 coordinateSystem:&quot;geo&quot;, //&apos;cartesian2d&apos;使用二维的直角坐标系。&apos;geo&apos;使用地理坐标系 xAxisIndex:0, //使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。 yAxisIndex:0, //使用的 y 轴的 index，在单个图表实例中存在多个 y轴的时候有用。 polarIndex:0, //使用的极坐标系的 index，在单个图表实例中存在多个极坐标系的时候有用。 geoIndex:0, //使用的地理坐标系的 index，在单个图表实例中存在多个地理坐标系的时候有用。 calendarIndex:0, //使用的日历坐标系的 index，在单个图表实例中存在多个日历坐标系的时候有用。 blurSize:20, //每个点模糊的大小，在地理坐标系(coordinateSystem: &apos;geo&apos;)上有效。 minOpacity:0, //最小的透明度，在地理坐标系(coordinateSystem: &apos;geo&apos;)上有效。 maxOpacity:1, //最大的透明度，在地理坐标系(coordinateSystem: &apos;geo&apos;)上有效。 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 data: [ //每一列称为一个『维度』。维度下标从0开始 [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], ], //markPoint:同bar //markLine:同bar //markArea:同bar tooltip:tooltip //index.js&#125;,]; series-lines.js文件为线图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;lines&quot;, //线图 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 coordinateSystem:&quot;geo&quot;, //&apos;cartesian2d&apos;使用二维的直角坐标系。&apos;geo&apos;使用地理坐标系 xAxisIndex:0, //使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。 yAxisIndex:0, //使用的 y 轴的 index，在单个图表实例中存在多个 y轴的时候有用。 geoIndex:0, //使用的地理坐标系的 index，在单个图表实例中存在多个地理坐标系的时候有用。 polyline:false, //是否是多段线。默认为 false，只能用于绘制只有两个端点的线段，线段可以通过 lineStyle.normal.curveness 配置为曲线。 symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 large:false, //是否开启大规模散点图的优化，在数据图形特别多的时候（&gt;=5k）可以开启。开启后配合 largeThreshold 在数据量大于指定阈值的时候对绘制进行优化。缺点：优化后不能自定义设置单个数据项的样式。 largeThreshold:2000, //开启绘制优化的阈值。 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:mylineStyle, emphasis:mylineStyle, &#125;, data: [ &#123; coords: [[120, 66], [122, 67]], lineStyle: &#123;normal: &#123;&#125;&#125; &#125; ], //markPoint:同bar //markLine:同bar //markArea:同bar tooltip:tooltip //index.js&#125;,]; series-map.js文件为地图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;map&quot;, //地图数据表 map:&quot;china&quot;, //地图类型。world世界地图，china中国地图 roam:false, //是否开启鼠标缩放和平移漫游。默认不开启。如果只想要开启缩放或者平移，可以设置成 &apos;scale&apos; 或者 &apos;move&apos;。设置成 true 为都开启 center:[115.97, 29.71], //当前视角的中心点，用经纬度表示 aspectScale:0.75, //这个参数用于 scale 地图的长宽比。 boundingCoords: [[-180, 90], [180, -90]], //二维数组，定义定位的左上角以及右下角分别所对应的经纬度 zoom:1, //当前视角的缩放比例 scaleLimit:&#123; //所属组件的z分层，z值小的图形会被z值大的图形覆盖 min:1, //最小的缩放值 max:1, //最大的缩放值 &#125;, nameMap:&#123; //自定义地区的名称映射 &apos;China&apos; : &apos;中国&apos; &#125;, selectedMode: false , //选中模式，表示是否支持多个选中，默认关闭，支持布尔值和字符串，字符串取值可选&apos;single&apos;表示单选，或者&apos;multiple&apos;表示多选。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等 normal:&#123; show:false, //是否在普通状态下显示标签。 textStyle:mytextStyle, //普通状态下的标签文本样式。 &#125;, emphasis:&#123; show:false, //是否在高亮状态下显示标签。 textStyle:mytextStyle //高亮状态下的标签文本样式。 &#125; &#125;, itemStyle:&#123; //地图区域的多边形 图形样式 normal:myitemStyle, emphasis:myitemStyle &#125;, zlevel:0, //所属图形的 zlevel 值。 z:2, //所属图形的 z 值。 left:&quot;10%&quot;, //组件离容器左侧的距离,百分比字符串或整型数字 top:60, //组件离容器上侧的距离，百分比字符串或整型数字 right:&quot;auto&quot;, //组件离容器右侧的距离,百分比字符串或整型数字 bottom:&quot;auto&quot;, //组件离容器下侧的距离,百分比字符串或整型数字 layoutCenter:[&apos;30%&apos;, &apos;30%&apos;], //地图中心在屏幕中的位置 layoutSize:100, //地图的大小,支持相对于屏幕宽高的百分比或者绝对的像素大小。 mapValueCalculation:&quot;sum&quot;, //多个拥有相同地图类型的系列会使用同一个地图展现，如果多个系列都在同一个区域有值，目前有：&apos;sum&apos; 取和。&apos;average&apos; 取平均值。&apos;max&apos; 取最大值。&apos;min&apos; 取最小值。 showLegendSymbol:true, //在图例相应区域显示图例的颜色标识（系列标识的小圆点），存在 legend 组件时生效。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 data: [ &#123;name: &apos;数据1&apos;,value: 10&#125;, &#123;name: &apos;数据2&apos;,value: 20&#125; ], //markPoint:同bar //markLine:同bar //markArea:同bar tooltip:tooltip //index,js&#125;,]; series-pie.js文件为饼图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;pie&quot;, //饼图 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 center:[&apos;50%&apos;, &apos;50%&apos;], //饼图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标。支持设置成百分比，设置成百分比时第一项是相对于容器宽度，第二项是相对于容器高度。 radius:[0, &apos;75%&apos;], //饼图的半径，数组的第一项是内半径，第二项是外半径。支持设置成百分比，相对于容器高宽中较小的一项的一半。可以将内半径设大显示成圆环图（Donut chart）。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 legendHoverLink:true, //是否启用图例 hover 时的联动高亮。 hoverAnimation:true, //是否开启 hover 在扇区上的放大动画效果。 selectedMode:false, //选中模式，表示是否支持多个选中，默认关闭，支持布尔值和字符串，字符串取值可选&apos;single&apos;，&apos;multiple&apos;，分别表示单选还是多选。 selectedOffset:10, //选中扇区的偏移距离。 clockwise:true, //饼图的扇区是否是顺时针排布。 startAngle:90, //起始角度，支持范围[0, 360]。 minAngle:0, //最小的扇区角度（0 ~ 360），用于防止某个值过小导致扇区太小影响交互。 roseType:false, //是否展示成南丁格尔图，通过半径区分数据大小。可选择两种模式：&apos;radius&apos; 扇区圆心角展现数据的百分比，半径展现数据的大小。&apos;area&apos; 所有扇区圆心角相同，仅通过半径展现数据大小。 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:myitemStyle, emphasis:myitemStyle, &#125;, data:[ &#123;name: &apos;数据1&apos;, value: 10&#125;, &#123;name: &apos;数据2&apos;, value: 20&#125; ], //markPoint:同bar //markLine:同bar //markArea:同bar tooltip:tooltip //index,js&#125;,]; series-radar.js文件为雷达图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;radar&quot;, //雷达图 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 radarIndex:0, //雷达图所使用的 radar 组件的 index。 symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:myitemStyle, emphasis:myitemStyle, &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle, &#125;, areaStyle:&#123; normal:myareaStyle, emphasis:myareaStyle, &#125;, data: [ //每一列称为一个『维度』。维度下标从0开始 &#123; value : [4300, 10000, 28000, 35000, 50000, 19000], name : &apos;预算分配（Allocated Budget）&apos; &#125;, &#123; value : [5000, 14000, 28000, 31000, 42000, 21000], name : &apos;实际开销（Actual Spending）&apos; &#125; ], tooltip:tooltip&#125;,]; series-scatter.js文件为散点图的参数配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135mytextStyle=&#123; color:&quot;#333&quot;, //文字颜色 fontStyle:&quot;normal&quot;, //italic斜体 oblique倾斜 fontWeight:&quot;normal&quot;, //文字粗细bold bolder lighter 100 | 200 | 300 | 400... fontFamily:&quot;sans-serif&quot;, //字体系列 fontSize:18, //字体大小&#125;;mylineStyle=&#123; color:&quot;#333&quot;, //颜色，&apos;rgb(128, 128, 128)&apos;，&apos;rgba(128, 128, 128, 0.5)&apos;，支持线性渐变，径向渐变，纹理填充 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 type:&quot;solid&quot;, //坐标轴线线的类型，solid，dashed，dotted width:1, //坐标轴线线宽 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myareaStyle=&#123; color:[&apos;rgba(250,250,250,0.3)&apos;,&apos;rgba(200,200,200,0.3)&apos;],//分隔区域颜色。分隔区域会按数组中颜色的顺序依次循环设置颜色。默认是一个深浅的间隔色。 shadowColor:&quot;red&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离 shadowBlur:10, //图形阴影的模糊大小。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形&#125;;myitemStyle=&#123; color:&quot;red&quot;, //颜色 borderColor:&quot;#000&quot;, //边框颜色 borderWidth:0, //柱条的描边宽度，默认不描边。 borderType:&quot;solid&quot;, //柱条的描边类型，默认为实线，支持 &apos;dashed&apos;, &apos;dotted&apos;。 barBorderRadius:0, //柱形边框圆角半径，单位px，支持传入数组分别指定柱形4个圆角半径。 shadowBlur:10, //图形阴影的模糊大小。 shadowColor:&quot;#000&quot;, //阴影颜色 shadowOffsetX:0, //阴影水平方向上的偏移距离。 shadowOffsetY:0, //阴影垂直方向上的偏移距离。 opacity:1, //图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。&#125;;mylabel=&#123; show:false, //是否显示标签。 position:&quot;inside&quot;, //标签的位置。// 绝对的像素值[10, 10],// 相对的百分比[&apos;50%&apos;, &apos;50%&apos;].&apos;top&apos;,&apos;left&apos;,&apos;right&apos;,&apos;bottom&apos;,&apos;inside&apos;,&apos;insideLeft&apos;,&apos;insideRight&apos;,&apos;insideTop&apos;,&apos;insideBottom&apos;,&apos;insideTopLeft&apos;,&apos;insideBottomLeft&apos;,&apos;insideTopRight&apos;,&apos;insideBottomRight&apos; offset:[30, 40], //是否对文字进行偏移。默认不偏移。例如：[30, 40] 表示文字在横向上偏移 30，纵向上偏移 40。 formatter:&apos;&#123;b&#125;: &#123;c&#125;&apos;, //标签内容格式器。模板变量有 &#123;a&#125;、&#123;b&#125;、&#123;c&#125;，分别表示系列名，数据名，数据值。 textStyle:mytextStyle&#125;;mypoint=&#123; symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;myline=&#123; symbol:[&quot;pin&quot;,&quot;circle&quot;], //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 precision:2, //标线数值的精度，在显示平均值线的时候有用。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, lineStyle:&#123; normal:mylineStyle, emphasis:mylineStyle &#125;&#125;;myarea=&#123; silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 label:&#123; normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; normal:myitemStyle, emphasis:myitemStyle &#125;&#125;;series=[&#123; type:&quot;scatter&quot;, //散点图 zlevel:0, //柱状图所有图形的 zlevel 值。 z:2, //柱状图组件的所有图形的z值。控制图形的前后顺序。z值小的图形会被z值大的图形覆盖。 silent:false, //图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。 name:&quot;数据名称&quot;, //系列名称，用于tooltip的显示，legend 的图例筛选，在 setOption 更新数据和配置项时用于指定对应的系列。 legendHoverLink:true, //是否启用图例 hover 时的联动高亮。 hoverAnimation:true, //是否开启鼠标 hover 的提示动画效果。 coordinateSystem:&quot;geo&quot;, //&apos;cartesian2d&apos;使用二维的直角坐标系。&apos;geo&apos;使用地理坐标系 xAxisIndex:0, //使用的 x 轴的 index，在单个图表实例中存在多个 x 轴的时候有用。 yAxisIndex:0, //使用的 y 轴的 index，在单个图表实例中存在多个 y轴的时候有用。 polarIndex:0, //使用的极坐标系的 index，在单个图表实例中存在多个极坐标系的时候有用。 geoIndex:0, //使用的地理坐标系的 index，在单个图表实例中存在多个地理坐标系的时候有用。 calendarIndex:0, //使用的日历坐标系的 index，在单个图表实例中存在多个日历坐标系的时候有用。 symbol:&quot;pin&quot;, //图形 &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos; symbolSize:50, //标记的大小，可以设置成诸如 10 这样单一的数字，也可以用数组分开表示宽和高，例如 [20, 10] 表示标记宽为20，高为10。 symbolRotate:0, //标记的旋转角度。注意在 markLine 中当 symbol 为 &apos;arrow&apos; 时会忽略 symbolRotate 强制设置为切线的角度。 symbolOffset:[0,0], //标记相对于原本位置的偏移。默认情况下，标记会居中置放在数据对应的位置 large:false, //是否开启大规模散点图的优化，在数据图形特别多的时候（&gt;=5k）可以开启。开启后配合 largeThreshold 在数据量大于指定阈值的时候对绘制进行优化。缺点：优化后不能自定义设置单个数据项的样式。 largeThreshold:2000, //开启绘制优化的阈值。 cursor:&quot;pointer&quot;, //鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。 label:&#123; //图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等， normal:mylabel, emphasis:mylabel &#125;, itemStyle:&#123; //图形样式，normal 是图形在默认状态下的样式；emphasis 是图形在高亮状态下的样式，比如在鼠标悬浮或者图例联动高亮时。 normal:myitemStyle, emphasis:myitemStyle, &#125;, encode: &#123; //可以定义 data 的哪个维度被编码成什么 x: [3, 1, 5], // 表示维度 3、1、5 映射到 x 轴。 y: 2, // 表示维度 2 映射到 y 轴。 tooltip: [3, 2, 4], // 表示维度 3、2、4 会在 tooltip 中显示。 label: 3 // 表示 label 使用维度 3。 &#125;, data: [ //每一列称为一个『维度』。维度下标从0开始 [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], [12, 44, 55, 66, 2], [23, 6, 16, 23, 1], ], //markPoint:同bar //markLine:同bar //markArea:同bar tooltip:tooltip //index.js&#125;,];]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ECharts</tag>
        <tag>地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JS的Ajax方法导致跨域问题的解决办法1]]></title>
    <url>%2F2018%2F02%2F11%2F%E5%85%B3%E4%BA%8EJS%E7%9A%84Ajax%E6%96%B9%E6%B3%95%E5%AF%BC%E8%87%B4%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%951%2F</url>
    <content type="text"><![CDATA[Cross origin requests are only supported for protocol schemes: http, data, chrome-extension-resource.报错处理以上错误提示是由于ajax方法涉及到跨域问题导致 由于没有在服务器环境里运行含有ajax方法的页面，而是直接通过浏览器打开(类似file:///的访问形式，即file协议) 本地页面ajax()请求本地页面，须通过服务器环境运行，类似1http://127.0.0.1:8888/EXP99.COM/index.html 远程服务器如果是在远程服务器ajax()请求外域服务器里的页面，即使通过服务器环境运行也会报跨域的错误，此时需要通过JSONP的形式！ JSONP(JSON with Padding)是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问问题。 JSONP示例： 12345678910111213$.ajax(&#123; type:&quot;get&quot;, async:false, url:&quot;http://app.example.com/base/json.do?sid=1494&amp;busild=101&quot;, dataType:&quot;jsonp&quot;, jsonp:&quot;jsonpCallback&quot;, success:function(data)&#123; $(&quot;#myID&quot;).text(&quot;Result&quot;+data.result) &#125;, error:function()&#123; alert(&apos;fail&apos;); &#125;&#125;); 本地浏览方案一 1.关闭所有打开的Chrome(重要)，否则没有效果 2.创建Chrome快捷方式，修改快捷方式的目标为(注意中间空格) 1C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --disable-web-security 若禁止修改，选择Chrome常规选项，去除“只读”属性 3.必须重启电脑，否则无效，若方案一无效，继续执行方案二 方案二 1.使用cmd命令，传入浏览器启动参数 –allow-file-access-from-files 123&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --allow-file-access-from-files或者C:\Program Files (x86)\Google\Chrome\Application&gt;chrome.exe --allow-file-access-from-files]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>跨域</tag>
        <tag>浏览器</tag>
        <tag>数据请求</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年书单]]></title>
    <url>%2F2018%2F02%2F07%2F2018%E5%B9%B4%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[hexo插入图片功能还没有搞定额！]]></content>
  </entry>
  <entry>
    <title><![CDATA[react组件生命周期]]></title>
    <url>%2F2018%2F02%2F07%2Freact%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[装载过程static defaultProps = {}示例：1234static defaultProps = &#123; likeText: &apos;取消&apos;, unlikedText: &apos;点赞&apos;&#125; 设置组件的默认props static propTypes = {}示例：123static propTypes = &#123; comment: PropTypes.string.isRequired&#125; 组件的props类型检测 类型检测发生在defaultProps赋值之后，所以类型检测也会应用在defaultProps上面 constructor()示例：1234567constructor(props)&#123; super(props) this.state = &#123; analyticsOpen: false, requirementsOpen: false &#125;&#125; 可以初始化state值，此时可以访问props componentWillMount()//可使用this.setState()，建议不要使用 示例：12345componentWillMount()&#123; this.timer = setInterval( () =&gt; &#123; this.setState(&#123; date: new Date() &#125;) &#125;)&#125; 最常见用例：常用于根组件中的引用程序配置 在组件被挂载前调用，只执行一次 这个方法很少用到 不能做任何涉及DOM的事情 render()渲染组件，创建虚拟DOM，必须实现该方法 componentDidMount()//可使用this.setState() 最常见用例：启动AJAX调用，以加载组件的数据 当需要访问真实的DOM时，这个方法经常用到 当我们需要请求外部接口数据时，一般都在这里处理 在组件装载后调用，这时候已经生成了真实的DOM节点，只执行一次 更新过程componentWillReceiveProps(nextProps)//可使用this.setState() 示例：12345componentWillReceiveProps(nextProps)&#123; if(this.props.percent !== nextProps.percent)&#123; this.setUpCircle(nextProps.percent) &#125;&#125; 最常见用例：根据特定的props，更改来触发状态(state)转换 当props或者state发生变化时，依次调用 每当通过父组件更新子组件props时，这个方法就会被调用 组件收到新的props时被调用，此时可以修改state 当父组件的render()方法执行后就会触发该方法，初始化时不调用 组件从父组件接收到新的props之前调用 接收到一个新的props时，在重新render之前调用 shouldComponentUpdate(nextProps, nextState)示例：1234shouldComponentUpdate(nextProps, nextState)&#123; return this.props.engagement !== nextProps.engagement || nextState.input !== this.state.input&#125; 最常见用例：当组件re-render(重新渲染时)，完全控制 组件接受新的state或者props时调用，可以在这里比较前后props和state是否相同返回不同的值 当props改变或state改变时调用，初始化时不调用，返回boolean。true表示继续执行render方法，false表示放弃本次渲染 可以通过这个方法控制组件是否重新渲染，如果返回false组件就不会重新渲染，这个生命周期在reactjs性能优化上非常有用 接收到一个新的state或者props时，在重新render之前调用 componentWillUpdate(nextProps, nextState)新的props或者state被接受时，在渲染前被立即调用 组件将会更新，props和state改变后必调用 组件开始重新渲染之前调用 接收到一个新的state或者props时，在重新render之前调用 render()渲染方法，创建虚拟DOM componentDidUpdate(prevProps, prevState)//可使用this.setState() 组件更新完成后调用，此时可以获取DOM节点 渲染组件 在更新真实的DOM成功后调用，当需要访问真实的DOM时，这个方法经常用到 组件重新渲染并且把更改变更到真实的DOM以后调用 组件完成更新之后调用 卸载过程componentWillUnmount()示例：123componentWillUnmount() &#123; clearInterval(this.timer)&#125; 组件将要卸载时调用，一些事件监听和定时器需要在此时清除 当在组件中使用setInterval时，需要在这个方法中调用clearTimeout 将组件从DOM树移出，防止内存溢出]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>组件</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mobx使用说明]]></title>
    <url>%2F2018%2F02%2F07%2Fmobx%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[mobx核心概念mobx安装 123npm install mobx --save 安装npm install mobx-react --save React绑定库 Observable需要被监听的应用状态：通过@observable修饰符可以细粒度地控制一个Class的哪个属性需要被监听 12345678910111213//创建需要被监听的应用状态class TodoItemModel &#123; id; @observable title; @observable completed; toggle() &#123; this.completed = !this.completed; &#125; setTitle(title) &#123; this.title = title; &#125; ...&#125; Reactions应用状态的监听者：当依赖的应用状态发生变化时，能够自动的执行相应的动作。reaction、autorun、@observer都可以生成一个Reactions 123456789101112131415161718192021222324252627//创建应用状态的监听者1//使用autorun在应用状态变化时打印日志autorun(() =&gt; console.log(this.completed);//创建应用状态的监听者2//使用reaction在应用状态变化时向服务端同步数据reaction( () =&gt; this.toJS(), todo =&gt; fetch(&apos;/todos/&apos; + todo.id, &#123; method: &apos;PUT&apos;, headers: new Headers(&#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;), body: JSON.stringify(todo) &#125;))//创建应用状态的监听者3//使用@observer在应用状态变化时更新UI，和React组件结合使用，会在应用状态更新时，重新渲染组件：@observerclass TodoItem extends React.Component &#123; ..... render() &#123; //UI logic code ... return ( .... ); &#125;&#125; mobx会记录监听者(Reactions)中对Observable变量的引用，通过引用在运行时动态地构建依赖图谱，从而实现精确的更新。这样mobx就可以保证某个Observable变量变化时，只执行对其有依赖的Reactions动作。 mobx作者mweststrate推荐对父组件和子组件都使用@observer。添加@observer对性能的影响可以忽略不计，不需要担心由此引发的性能问题，事实上作者在自己的项目中对所有的组件都是用@observer，也没有问题。 如果一个组件需要使用@observable变量(应用状态)，就应该使用@observer修饰符 凡是涉及到对应用状态变量修改的函数，都应该使用@action修饰符 12345678910111213@autobindclass TodoItemModel &#123; id; @observable title; @observable completed; //使用action后，reset函数执行完成后，才会触发一次其监听者 @action reset() &#123; this.completed = false; this.title= &apos;&apos;; &#125;&#125; Observable state(可观察的状态)mobx为现有的数据结构(如对象，数组和类实例)添加了可观察的功能，通过使用@observable装饰器来给你的类属性添加注解就可以简单的完成这一切 Computed values(计算值)使用mobx，可以定义在相关数据发生变化时自动更新的值，通过@computed装饰器或者利用(extend)Observable时调用的getter/setter函数来进行使用 123456class TodoList&#123; @observable todos = []; @computed get unfinishedTodoCount()&#123; return this.todos.filter(todo =&gt; !todo.finished).lenght; &#125;&#125; Reactions(反应)Reactions和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新React组件树以修补DOM等等。简而言之，reactions在响应式编程和命令式编程之间建立沟通的桥梁。 mobx要点mobx将一个应用变成响应式的可归纳为以下三个步骤 定义状态并使其可观察1234import &#123;observable&#125; from &apos;mobx&apos;;var appState = observable(&#123; timer: 0&#125;); 创建视图以响应状态的变化1234567891011121314151617//通常来说，任何函数都可以成为可以观察自身数据的响应式视图，MobX 可以在任何符合ES5的JavaScript环境中应用。import &#123;observer&#125; from &apos;mobx-react&apos;;@observerclass TimeView extends React.Component&#123; render()&#123; return ( &lt;button onClick=&#123;this.onReset.bind(this)&#125;&gt; Seconds passed: &#123;this.props.appState.timer&#125; &lt;/button&gt; ); &#125; onReset()&#123; this.props.appState.resetTimer(); &#125; &#125;;ReactDOM.render(&lt;TimeView appState=&#123;appState&#125;) /&gt;, document.body);(resetTimer函数实现省略) 更改状态123456789//下面的代码每秒都会修改你的数据，而当需要的时候UI会自动更新。无论是在改变状态的控制器函数中，还是在应该更新的视图中，都没有明确的关系定义。使用observable来装饰你的状态和视图，这足以让MobX检测所有关系了。appState.resetTimer = action(function reset()&#123; appState.timer = 0;&#125;);setInterval(action(function tick()&#123; appState.timer += 1;&#125;), 1000);//只有在严格模式(默认是不启用)下使用mobx时才需要action包装，建议使用action，因为它将帮助你更好的组织，并表达出一个函数修改状态的意图，同时，它还自动应用事物以获得最佳性能。 概念与原则State(状态)Derivations(衍生)​ 1.computed values(计算值) ​ 2.reactions(反应) Actions(动作)原则上，mobx支持单向数据流，也就是动作改变状态，而状态的改变会更新所有受影响的视图 action—&gt;state—&gt;views mobx APIobservable用法：observable(value) 12345678910111213141516171819示例：//mapconst map = observable.map(&#123; key: &quot;value&quot;&#125;);map.set(&quot;key&quot;, &quot;new value&quot;);//数组const list = observable([1, 2, 4]);list[2] = 3;//对象const person = observable(&#123; firstName: &quot;Clive Staples&quot;, lastName: &quot;Lewis&quot;&#125;);person.firstName = &quot;C.S.&quot;;//一般值const temperature = observable(20);temperature.set(25); @observable@observable可以在实例字段和属性getter上使用 123456789import &#123;observable&#125; from &quot;mobx&quot;;class OrderLine &#123; @observable price = 0; @observable amount = 1; @computed get total() &#123; return this.price * this.amount; &#125;&#125; (@)computed不要把 computed 和 autorun 搞混。它们都是响应式调用的表达式，但是，如果你想响应式的产生一个可以被其它 observer 使用的值，请使用 @computed，如果你不想产生一个新值，而想要达到一个效果，请使用 autorun。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。 12345678910111213141516171819202122232425//如果已经启用 decorators 的话，可以在任意类属性的 getter 上使用 @computed 装饰器来声明式的创建计算属性。import &#123;observable, computed&#125; from &quot;mobx&quot;;class OrderLine &#123; @observable price = 0; @observable amount = 1; @observable length = 2; constructor(price) &#123; this.price = price; &#125; @computed get total() &#123; return this.price * this.amount; &#125; @computed get squared()&#123; return this.length*this.length; &#125; set squared(value)&#123; //这是一个自动的动作 this.length = Math.sqrt(value) &#125;&#125;//注意: 永远在getter之后定义setter，一些 TypeScript 版本会知道声明了两个具有相同名称的属性。 autorun123456789101112//autorun 只会观察在执行提供的函数时所使用的数据。 var numbers = observable([1,2,3]);var sum = computed(() =&gt; numbers.reduce((a, b) =&gt; a + b, 0));var disposer = autorun(() =&gt; console.log(sum.get()));// 输出 &apos;6&apos;numbers.push(4);// 输出 &apos;10&apos;disposer();numbers.push(5);// 不会再输出任何值。`sum` 不会再重新计算。 (@)observerobserver 函数/装饰器可以用来将 React 组件转变成响应式组件。 它用 mobx.autorun 包装了组件的 render 函数以确保任何组件渲染中使用的数据变化时都可以强制刷新组件。 observer 是由单独的 mobx-react 包提供的。 1234567891011121314151617import &#123;observer&#125; from &quot;mobx-react&quot;;var timerData = observable(&#123; secondsPassed: 0&#125;);setInterval(() =&gt; &#123; timerData.secondsPassed++;&#125;, 1000);@observer class Timer extends React.Component &#123; render() &#123; return (&lt;span&gt;Seconds passed: &#123; this.props.timerData.secondsPassed &#125; &lt;/span&gt; ) &#125;&#125;;React.render(&lt;Timer timerData=&#123;timerData&#125; /&gt;, document.body); action建议对任何修改observables或具有副作用的函数使用(@)action 应该永远只对修改状态的函数使用动作。 只执行查找，过滤器等函数不应该被标记为动作，以允许 MobX 跟踪它们的调用 12345678910111213141516171819@action createRandomContact() &#123; this.pendingRequestCount++; superagent .get(&apos;https://randomuser.me/api/&apos;) .set(&apos;Accept&apos;, &apos;application/json&apos;) .end(action(&quot;createRandomContact-callback&quot;, (error, results) =&gt; &#123; // ^ 注意: 异步回调函数是单独的动作！ if (error) console.error(error); else &#123; const data = JSON.parse(results.text).results[0]; const contact = new Contact(this, data.dob, data.name, data.login.username, data.picture) contact.addTag(&apos;random-user&apos;); this.contacts.push(contact); this.pendingRequestCount--; &#125; &#125;)); &#125; 参考网址： 使用mobx开发高性能react应用mobx中文文档]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mobx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex布局]]></title>
    <url>%2F2018%2F02%2F07%2Fflex%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[任何容器指定为flex布局 1display:flex; 行内元素 1display:inline-flex; 注意： 12345设为flex布局以后，子元素的float、clear和vertical-align属性将无效水平的是主轴 main axis垂直的是交叉轴 cross axis 容器属性flex-direction 属性决定主轴的方向（即项目的排列方向） 1234567row（默认值）：主轴为水平方向，起点在左端row-reverse：主轴为水平方向，起点在右端column：主轴为垂直方向，起点在上沿column-reverse:主轴为垂直方向，起点在下沿 flex-wrap属性决定如果在一条轴线排不下，如何换行 12345nowrap（默认值）：不换行wrap：换行，第一行在上方wrap-reverse：换行，第一行在下方 flex-flow属性flex-direction属性和flex-wrap属性的简写形式1flex-flow:row nowrap; (默认值) justify-content属性定义了项目在主轴上的对齐方式 (具体对齐方式与主轴方向有关，下面假设主轴从左到右)123456789flex-start（默认值）：左对齐flex-end：右对齐center：居中space-between：两端对齐，项目之间的间隔都相等space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边框的间隔大一倍 align-items属性定义项目在交叉轴上如何对齐 (具体对齐方式与交叉轴方向有关，下面假设交叉轴从上到下)123456789stretch（默认值）：如果项目未设置高度或设置为auto，将占满整个容器的高度flex-start：交叉轴的起点对齐flex-end：交叉轴的终点对齐center：交叉轴的中点对齐baseline：项目的第一行文字的基线对齐 align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用1234567891011strench（默认值）：轴线占满整个交叉轴flex-start：交叉轴的起点对齐flex-end：交叉轴的终点对齐center：交叉轴的中点对齐space-between：交叉轴两端对齐，轴线之间的间隔平均分布space-around：每根轴线两侧的间隔都相等，所以轴线之间的间隔比轴线与边框的间隔大一倍 项目属性order属性定义项目的排列顺序，数值越小，排列越靠前，默认为01order:-2; flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。 如果一个项目的flex-grow属性为2，其它项目都为1，则前者占据的剩余空间将比其它项都一倍。1flex-grow:1; flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。 如果一个项目的flex-shrink属性为0，其它项目都为1，则空间不足时，前者不缩小。 负值对该属性无效。1flex-shrink:0; flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。默认值为auto，即项目的本来大小。 它可以设为跟width或height属性一样的值1flex-basis:350px; flex属性flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。后两个属性可选。 该属性有两个快捷值：auto（1 1 auto）和none（0 0 auto） 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。1flex:none; align-self属性允许单个项目有与其它项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示 继承父元素的align-items属性，如果没有父元素，则等同于stretch。 ​该属性可能取6个值，除了auto，其它都与align-items属性完全一致。1align-self:auto;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>flex</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo基础配置和日常使用]]></title>
    <url>%2F2018%2F02%2F07%2Fhexo%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%92%8C%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[使用Github Pages 可以绑定你的域名(但暂时貌似只能绑定一个)。 简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。 安装Node.js在 Windows 环境下安装 Node.js 非常简单，仅须到官网下载安装文件并执行即可完成安装。像我的是Windows 64位，直接下载安装，无脑下一步就行了，不需要配置环境变量。 安装Git去Git官网根据你的电脑参数，下载对应版本。 下载完成，通过在命令行输入 git version 查看是否安装成功，有输出版本号说明安装成功。 鼠标邮件菜单里就多了Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。 安装教程：如何在windows下安装GIT Git入门教程：Pro Git（中文版） Git基本操作： Hexo安装桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装 12npm install hexo-cli -gnpm install hexo-deployer-git --save 第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。 如下图即安装完成。 Hexo初始化配置创建Hexo文件夹安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。 注意：操作以下命令前必须提前配置环境变量 1$ hexo init 安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下： 本地查看效果执行下面语句，执行完即可登录localhost:4000查看效果 注意：操作以下命令前需要提前安装hexo-server模块 123//npm install hexo-serverhexo generatehexo server 登录localhost:4000，即可看到本地的效果如下： 将博客部署到Github Pages上那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。 注册Github账户 访问Github首页 点击右上角的 Sign Up，注册自己的账户 创建项目代码库 注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。 创建要点如下： 配置SSH密钥配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下： 看看是否存在SSH密钥(keys)首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行: 1$ cd ~/. ssh 检查你本机用户home目录下是否存在.ssh目录 如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。 创建一对新的SSH密钥(keys)1234$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;#这将按照你提供的邮箱地址，创建一对密钥Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter] 直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa 接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下： 12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 输入完成之后，屏幕会显示如下信息： 1234Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 在GitHub账户中添加你的公钥运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。 1clip &lt; ~/.ssh/id_rsa.pub 接着： 1.登陆GitHub,进入你的Account Settings. 2.选择SSH Keys 3.粘贴密钥，添加即可 (Title可以随便填写，Key复制刚刚的密钥) 测试可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改： 1$ ssh -T git@github.com 如果是下面的反馈： 123The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好，然后会看到：successfully… 设置用户信息现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。 12$ git config --global user.name &quot;ryanlijianchang&quot;//用户名$ git config --global user.email &quot;liji.anchang@163.com&quot;//填写自己的邮箱 SSH Key配置成功本机已成功连接到github。 将本地的Hexo文件更新到Github的库中登录Github打开自己的项目 username.github.io打开之后，点击SSH，选择SSH类型地址复制地址打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件在配置文件里作如下修改，保存(注意：填写git双引号后面空格)1234deploy: type: git repository: 填写刚才的SSH地址 branch: master 在Hexo文件夹下执行：12hexo ghexo d 或者直接执行 1hexo g -d 执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：ryanlijianchang.github.io)。 假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次： 1npm install hexo-deployer-git --save 或者 123456deploy的type的github需要改为gitnpm install hexo-deployer-git --save检查是否在环境变量path中配置了git的路径如：D:\program files\Git\bin; D:\program files\Git\mingw64\libexec\git-core; 这样，你再执行hexo g -d，你的博客就部署到Github上了。 在浏览器上输入自己的主页地址在浏览器上输入Github Pager为我们生成的外链（例如我的是：ryanlijianchang.github.io/，而你的只需要把你的github用户名替换掉这个链接中的ryanlijianchang，因为我的用户名是这个，那么你自己的专属博客地址就是：https://[您的用户名].github.io/）即可看到自己的博客了。 当然，每一个人都可以通过这个地址访问到你的博客了。 美化自己博客进入Hexo的官网主题专栏挑选我们喜欢的主题可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题) 克隆主题再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入: 1git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) 下载中，等待下载完成： 修改Hexo配置文件下载完成后，打开Hexo文件夹下的配置文件_config.yml 修改参数为：theme: hexo-theme-next 部署主题，本地查看效果返回Hexo目录，右键Git Bash，输入 12hexo ghexo s 打开浏览器，输入 http://localhost:4000/ 即可看见我们的主题已经更换了。 如果效果满意，将它部署到Github上打开Hexo文件夹，右键Git Bash，输入 12hexo clean (必须要，不然有时因为缓存问题，服务器更新不了主题)hexo g -d 打开自己的主页，即可看到修改后的效果更多修改效果请查看对应主题的说明文档，点击此查看本主题(Next)对应的说明文档。 在博客写文章用hexo发表新文章1$ hexo n &quot;文章标题&quot; 其中 我的家 为文章标题，执行命令 hexo n &quot;我的家&quot; 后，会在项目 \Hexo\source_posts 中生成 我的家.md文件，用编辑器打开编写即可。 当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。 12$ hexo g #生成$ hexo d #部署 # 可与hexo g合并为 hexo d -g 用Markdown写文章我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。 复制进去之后，只要执行 1$ hexo d -g 推送到我们的Github仓库即可。 那么什么是Markdown？Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 Markdown有什么优点？ 专注你的文字内容而不是排版样式。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 可读，直观。适合所有人的写作语言。 我该用什么工具？ Windows下可以使用 MarkdownPad2。 在 Mac OS X 上，我建议你用 Mou 这款免费且十分好用的 Markdown 编辑器。 Web 端上，我强烈推荐 简书 这款产品。 关于Markdown的更多资料可以查看如下： 认识与入门 Markdown Markdown入门指南 Hexo日常使用生成静态页面1$ hexo generate 本地预览123$ hexo server //或者 hexo s//然后打开浏览器输入localhost: 4000预览博客效果 新建文章12$ hexo new post &quot;title&quot;//新文章位置：/source/_posts 新建页面1$ hexo new page &quot;title&quot; 部署并生成1$ hexo d -g 清除生成的文件和缓存1$ hexo clean 整篇论文拷贝于:2018，你该搭建自己的博客了Hexo静态博客搭建+个人定制]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo个性化设置]]></title>
    <url>%2F2018%2F02%2F06%2Fhexo%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[设置faviconfavicon的全称Favorites Icon，即地址栏左侧的图标： 有个在线工具可以上传自己的图片去生成指定规格的favicon.ico文件：http://www.atool.org/ico.php。打开主题配置文件_config.yml可以看到favicon的配置信息： 12# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico 根据说明，我们将图标取名为favicon.ico然后放到当前工程的hexo\source目录下，重启博客即可生效。 菜单栏控制我们看到页面顶部的菜单栏，其实是由主题配置文件中的menu字段控制的，例如原本的样子是这样： 我们修改一下主题配置文件，如下把about页面前面的注释去掉，即让此页签处于显示状态： 123456789101112# ------------------------------------------------------# Menu Settings# ------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)menu: home: / #categories: /categories about: /about archives: /archives tags: /tags #commonweal: /404.html 重启博客可以看到效果如下： 然而，点击打开About却出现了“Cannot GET /about/”的页面错误，这是因为我们还没有about这个页面，需要使用hexo new page &quot;页面名称&quot;进行创建： 1hexo new page about 执行结果就是在hexo\source目录下面多出了一个about文件夹，里面有index.md，这就是点击About会展示的内容页面。同理，也可以创建tags页面。 语言设置在站点配置文件中假如如下内容，明确指定使用的语言，例如中文： 1language: zh-Hans 设置完毕后，发现菜单栏也发生了变化： 侧栏设置在主题配置文件的sidebar字段，此处我直接设置为侧栏一直显示，而且显示在右边： 1234567891011121314sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggler. #display: post display: always #display: hide #display: remove 设置头像和作者名称在站点配置文件中，新加一个字段avatar，值就是头像的连接地址，这里我使用站内地址，将avatar.png放到本地目录hexo\source\images中；作者名称直接设置站点配置文件中author字段的值： 12345678# Sitetitle: Linsh-何乐不为~subtitle:description:author: Linshuheavatar: /images/avatar.pnglanguage: zh-Hanstimezone: 在右上角或者左上角实现fork me on github实现效果图 具体实现方法 点击这里 或者 这里挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面)，并把href改为你的github地址 添加RSS实现效果图 具体实现方法 切换到你的blog（我是取名blog，具体的看你们的取名是什么）的路径，例如我是在/Users/chenzekun/Code/Hexo/blog这个路径上，也就是在你的根目录下 然后安装 Hexo 插件：(这个插件会放在node_modules这个文件夹里) 1$ npm install --save hexo-generator-feed1 接下来打开画红线的文件，如下图： 在里面的末尾添加：(请注意在冒号后面要加一个空格，不然会发生错误！) 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed123 然后打开next主题文件夹里面的_config.yml,在里面配置为如下样子：(就是在rss:的后面加上/atom.xml,注意在冒号后面要加一个空格) 1234# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml1234 配置完之后运行： 1$ hexo g1 重新生成一次，你会在./public 文件夹中看到 atom.xml 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。 添加动态背景实现效果图 具体实现方法 这个我之前有一篇文章有讲过了，详情点击我的博客 实现点击出现桃心效果实现效果图 具体实现方法 在网址输入如下 1http://7u2ss1.com1.z0.glb.clouddn.com/love.js1 然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout\_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;12 修改文章内链接文本样式实现效果图 具体实现方法 修改文件 themes\next\source\css\_common\components\post\post.styl，在末尾添加如下css样式，： 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;1234567891011 其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 修改文章底部的那个带#号的标签实现效果图 具体实现方法 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 在每篇文章末尾统一添加“本文结束”标记实现效果图 具体实现方法 在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;12345 接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）： 代码如下： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt;12345 然后打开主题配置文件（_config.yml),在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true123 完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。 修改作者头像并旋转实现效果图： 具体实现方法 打开\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，在里面添加如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 博文压缩在站点的根目录下执行以下命令： 123$ npm install gulp -g$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save123 在如下图所示，新建 gulpfile.js ，并填入以下内容： 123456789101112131415161718192021222324252627282930313233var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);// 压缩 public 目录 cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public 目录 htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩 public/js 目录 jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src(&apos;./public/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 执行 gulp 命令时执行的任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;]);123456789101112131415161718192021222324252627282930313233 生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。 修改代码块自定义样式实现效果图 具体实现方法 打开\themes\next\source\css\_custom\custom.styl,向里面加入：(颜色可以自己定义) 123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;123456789101112131415 侧边栏社交小图标设置实现效果图 具体实现方法 打开主题配置文件（_config.yml），搜索social_icons:,在图标库找自己喜欢的小图标，并将名字复制在如下位置 主页文章添加阴影效果实现效果图 具体实现方法 打开\themes\next\source\css\_custom\custom.styl,向里面加入： 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125;12345678 在网站底部加上访问量实现效果图 具体实现方法 打开\themes\next\layout\_partials\footer.swig文件,在copyright前加上画红线这句话： 代码如下： 1&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;1 然后再合适的位置添加显示统计的代码，如图：代码如下： 12345&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;12345 在这里有两中不同计算方式的统计代码： pv的方式，单个用户连续点击n篇文章，记录n次访问量 123&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;123 uv的方式，单个用户连续点击n篇文章，只记录1次访客数 123&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;123 添加之后再执行hexo d -g，然后再刷新页面就能看到效果 添加热度实现效果图： 具体实现方法 next主题集成leanCloud，打开/themes/next/layout/_macro/post.swig,在画红线的区域添加℃： 然后打开，/themes/next/languages/zh-Hans.yml,将画红框的改为热度就可以了 网站底部字数统计实现效果图 具体方法实现 切换到根目录下，然后运行如下代码 1$ npm install hexo-wordcount --save1 然后在/themes/next/layout/_partials/footer.swig文件尾部加上： 1234&lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt;1234 添加 README.md 文件每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。 在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置为 1skip_render: README.md1 保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。 实现统计功能实现效果图 具体实现方法 在根目录下安装 hexo-wordcount,运行： 1$ npm install hexo-wordcount --save1 然后在主题的配置文件中，配置如下： 123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true123456 添加顶部加载条实现效果图 具体实现方法 打开/themes/next/layout/_partials/head.swig文件，添加红框上的代码代码如下： 12&lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt;12 但是，默认的是粉色的，要改变颜色可以在/themes/next/layout/_partials/head.swig文件中添加如下代码（接在刚才link的后面） 12345678910111213&lt;style&gt; .pace .pace-progress &#123; background: #1E92FB; /*进度条颜色*/ height: 3px; &#125; .pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/ &#125; .pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/ &#125;&lt;/style&gt;12345678910111213 目前，博主的增加顶部加载条的pull request 已被Merge===&gt;详情现在升级最新版的next主题，升级后只需修改主题配置文件(_config.yml)将pace: false改为pace: true就行了，你还可以换不同样式的加载条，如下图： 在文章底部增加版权信息实现效果图 在目录 next/layout/_macro/下添加 my-copyright.swig： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125;123456789101112131415161718192021222324252627282930 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125;123456789101112131415161718192021222324252627282930313233343536373839404142434445 修改next/layout/_macro/post.swig，在代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt;12345 之前添加增加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt;12345 如下： 修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码： 1@import &quot;my-post-copyright&quot;1 保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似： 1234567---title: 前端小项目：使用canvas绘画哆啦A梦date: 2017-05-22 22:53:53tags: canvascategories: 前端copyright: true---1234567 小技巧：如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加：这样每次hexo new &quot;你的内容&quot;之后，生成的md文件会自动把copyright:加到里面去(注意：如果解析出来之后，你的原始链接有问题：如：http://yoursite.com/前端小项目：使用canvas绘画哆啦A梦.html,那么在根目录下_config.yml中写成类似这样：）就行了。 添加网易云跟帖(跟帖关闭，已失效，改为来必力)实现效果图 具体方法实现有两种实现方法：①更新next主题，因为最新版本的主题已经支持这种评论。直接在主题配置文件_config.yml 文件中添加如下配置: 1gentie_productKey: #your-gentie-product-key1 ②如果你不想更新的话，那么按下面步骤进行：首先，还是在主题配置文件_config.yml 文件中添加如下配置: 1gentie_productKey: #your-gentie-product-key1 你的productKey就是下面画红线部分 然后在在layout/_scripts/third-party/comments/ 目录中添加 gentie.swig，文件内容如下： 1234567891011121314&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id %&#125; &#123;% if theme.gentie_productKey %&#125; &#123;% set gentie_productKey = theme.gentie_productKey %&#125; &lt;script&gt; var cloudTieConfig = &#123; url: document.location.href, sourceId: &quot;&quot;, productKey: &quot;&#123;&#123;gentie_productKey&#125;&#125;&quot;, target: &quot;cloud-tie-wrapper&quot; &#125;; &lt;/script&gt; &lt;script src=&quot;https://img1.ws.126.net/f2e/tie/yun/sdk/loader.js&quot;&gt;&lt;/script&gt; &#123;% endif %&#125;&#123;% endif %&#125;1234567891011121314 然后在layout/_scripts/third-party/comments.swig文件中追加： 12&#123;% include &apos;./comments/gentie.swig&apos; %&#125;12 最后，在 layout/_partials/comments.swig 文件中条件最后追加网易云跟帖插件引用的判断逻辑： 123&#123;% elseif theme.gentie_productKey %&#125; &lt;div id=&quot;cloud-tie-wrapper&quot; class=&quot;cloud-tie-wrapper&quot;&gt; &lt;/div&gt;123 具体位置如下： 可能你hexo s时可能看不到，直接hexo d就可以看到了 近日，我朋友发来消息，说网易云跟帖要关了，我网上查了一下，果然如此 都是泪,上次用了多说，结果多说关了，接着是网易云跟帖，这次直接用国外的来必力，应该不会这么容易关吧 方法其实还是跟上面差不多的 首先在 _config.yml 文件中添加如下配置： 123# Support for LiveRe comments system.# You can get your uid from https://livere.com/insight/myCode (General web site)livere_uid: your uid123 其中，livere_uid就是画红线的部分 然后在 layout/_scripts/third-party/comments/ 目录中添加 livere.swig，文件内容如下： 1234567891011121314&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125; &#123;% if theme.livere_uid %&#125; &lt;script type=&quot;text/javascript&quot;&gt; (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125; j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, &apos;script&apos;); &lt;/script&gt; &#123;% endif %&#125;&#123;% endif %&#125;123456789101112131415 然后在 layout/_scripts/third-party/comments.swig文件中追加： 1&#123;% include &apos;./comments/livere.swig&apos; %&#125;1 最后，在 layout/_partials/comments.swig 文件中条件最后追加 LiveRe 插件是否引用的判断逻辑： 123&#123;% elseif theme.livere_uid %&#125; &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&#123;&#123; theme.livere_uid &#125;&#125;&quot;&gt;&lt;/div&gt;&#123;% endif %&#125;123 隐藏网页底部powered By Hexo / 强力驱动打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。位置如图： 修改网页底部的桃心还是打开themes/next/layout/_partials/footer.swig，找到：，然后还是在图标库中找到你自己喜欢的图标，然后修改画红线的部分就可以了。 文章加密访问实现效果图 具体实现方法 打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 代码如下： 12345678910&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误！&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt;12345678910 然后在文章上写成类似这样： 添加jiathis分享在主题配置文件中，jiathis为true，就行了，如下图 默认是这样子的：如果你想自定义话，打开themes/next/layout/_partials/share/jiathis.swig修改画红线部分就可以了 博文置顶修改 hero-generator-index 插件，把文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为： 12345678910111213141516171819202122232425262728&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;;12345678910111213141516171819202122232425262728 在文章中添加 top 值，数值越大文章越靠前，如 123456789---title: 解决Charles乱码问题date: 2017-05-22 22:45:48tags: 技巧categories: 技巧copyright: truetop: 100---123456789 修改字体大小打开\themes\next\source\css\ _variables\base.styl文件，将$font-size-base改成16px，如下所示： 1$font-size-base =16px1 修改打赏字体不闪动修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数wechat:hover和alipay:hover，如下： 123456789101112/* 注释文字闪动函数 #wechat:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; #alipay:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125;*/123456789101112 自定义鼠标样式打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码 1234567// 鼠标样式 * &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important &#125; :active &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important &#125;1234567 其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了 为博客加上萌萌的宠物实现效果图 具体实现方法在终端切换到你的博客的路径里，然后输入如下代码： 1npm install -save hexo-helper-live2d1 然后打开Hexo/blog/themes/next/layout的_layout.swig,将下面代码放到&lt;/body&gt;之前： 1&#123;&#123; live2d() &#125;&#125;1 然后在在 hexo 的 _config.yml中添加参数： 123live2d: model: wanko bottom: -30123 然后hexo clean ，hexo g ，hexo d 就可以看到了。 下面是一些model，可以换不同的宠物 model 模型名称 默认值: z16 Gantzert_Felixander Epsilon2.1 haru miku ni-j nico nito nipsilon nietzsche shizuku tsumiki wanko z16 hibiki koharu haruto Unitychan tororo hijiki width 宽度 默认值: 150 height 高度 默认值： 300 className &lt;canvas&gt;元素的类名 默认值： live2d id &lt;canvas&gt; 元素的id 默认值： live2dcanvas bottom &lt;canvas&gt; 元素的底部偏移 默认值： -20 如果嫌模型位置不正确 可以调整这个参数 用这个有缺点，如果是在手机上看的话，感觉不是很好，宠物一直挡着文字，还有就是加载有点慢 （感谢Layne网友的提醒，目前手机上显示宠物的问题已经解决，如果不想在手机上显示宠物的话，修改主题配置文件，改为如下：） 1234live2d: model: wanko bottom: -30 mobileShow: false 1234 注意！如果你在 hexo d 的时候出现我下面这个问题你可以这样，首先删除hexo 下面的.deploy_git文件夹，然后运行 1git config --global core.autocrlf false1 重新 hexo clean,hexo g,hexo d就行了 DaoVoice 在线联系实现效果图 具体实现方法 首先在 daovoice 注册账号,邀请码是0f81ff2f,注册完成后会得到一个 app_id : ,记下这个 app_id的值，然后打开/themes/next/layout/_partials/head.swig,写下如下代码： 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125;123456789 接着打开主题配置文件，在最后写下如下代码： 1234# Online contact daovoice: truedaovoice_app_id: 这里填你的刚才获得的 app_id1234 重新 hexo g ，hexo s 就能看到效果了。 安装成功后可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式，附上我的设置 点击爆炸效果实现效果图 实现方法 跟那个红心是差不多的，首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下： 1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;1 打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码： 12345&#123;% if theme.fireworks %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;12345 打开主题配置文件，在里面最后写下： 12# Fireworksfireworks: true12]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2F2018%2F02%2F01%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[用户信息配置12$ git config --global user.name "zhouguang9"$ git config --global user.email "790840179@qq.com" 网络下载至新文件夹123$ git clone https://git.coding.net/narisolar/apogee.git$ git branch zhouguang //新建本地分支zhouguang 网络下载项目并与本地项目合并123456$ git checkout master //切换至本地master$ git pull //将网络master拉至本地master$ git checkout zhouguang //切换至本地zhouguang 方案一：12$ git push origin zhouguang:zhouguang//网络zhouguang没有建立，现在建立并上传本地zhouguang至网络zhouguang 方案二：1234567$ git pull(可不操作)$ git branch --set-upstream-to=origin/zhouguang zhouguang //本地zhouguang与远程zhouguang联系$ git pull//将网络zhouguang拉至本地zhouguang$ git merge master//将本地master(已经将网络master拉下来的)与zhouguang合并 上传本地项目至网络分支zhouguang12345$ git status$ git add .$ git commit -m "代码备注"$ git push origin zhouguang //origin是服务器zhouguang是分支 合并到网络分支master123$ git checkout master$ git merge zhouguang$ git push]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
